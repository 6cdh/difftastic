
=====================================
Function statement with comment and type annotation
=====================================


{-| Returns a dictionary mapping `ScreenId` to its problems, if any.
-}
problemsByScreenId : List Problem -> AnyDict String ScreenId (List ScreenProblem)
problemsByScreenId problems =
    let
        assocById problem =
            case problem of
                ContentProblem (WithScreen screenId prob) ->
                    Just ( screenId, prob )

                _ ->
                    Nothing

        groupById =
            List.foldl
                (\( screenId, problem ) acc -> Util.AnyDict.collect screenId problem acc)
                (AnyDict.empty ScreenId.toString)
    in
    List.filterMap assocById problems
        |> groupById
---

(file
(block_documentation)
(type_annotation (lower_case_identifier) (colon)
    (type_expression (type_ref (upper_case_qid (upper_case_identifier)) (type_ref (upper_case_qid (upper_case_identifier))))
      (arrow) (type_ref (upper_case_qid (upper_case_identifier)) (type_ref (upper_case_qid (upper_case_identifier))))
    )
)
(value_declaration
  (pattern (union_pattern (upper_case_qid (upper_case_identifier))  (left_parenthesis)
    (pattern (union_pattern (upper_case_qid (upper_case_identifier)) (upper_case_qid (upper_case_identifier)))) (right_parenthesis)
    (lower_pattern (lower_case_identifier)) (lower_pattern (lower_case_identifier)))
  ) (eq)

    (let_in_expr (let)
      (value_declaration (function_declaration_left (lower_case_identifier) (lower_pattern (lower_case_identifier))) (eq)
       (case_of_expr (case) (value_expr (value_qid (lower_case_identifier))) (of)
        (case_of_branch (pattern (union_pattern (upper_case_qid (upper_case_identifier))
          (left_parenthesis) (pattern (union_pattern (upper_case_qid (upper_case_identifier))
            (lower_pattern (lower_case_identifier))
            (lower_pattern (lower_case_identifier)))) (right_parenthesis))) (arrow)
          (function_call_expr (value_expr (upper_case_qid (upper_case_identifier)))
            (tuple_expr (left_parenthesis) (value_expr (value_qid (lower_case_identifier)))
            (comma) (value_expr (value_qid (lower_case_identifier))) (right_parenthesis))))
        (case_of_branch (pattern (anything_pattern (underscore))) (arrow)
          (function_call_expr (value_expr (upper_case_qid (upper_case_identifier))))
        ))
      (value_declaration (function_declaration_left (lower_case_identifier)) (eq)

      ) (in)
      (function_call_expr (value_expr (value_qid (upper_case_identifier) (dot) (lower_case_identifier))) (value_expr (value_qid (lower_case_identifier)))
        (value_expr (value_qid (lower_case_identifier)))) (operator (operator_identifier)) (value_expr (value_qid (lower_case_identifier)))
      )
    )
  )
)
)


=====================================
Function statement with nested case
=====================================

balance =
    case right of
        y ->
            case left of
                c ->
                    a

        _ ->
            x

---

(file
    (value_declaration
        (function_declaration_left (lower_case_identifier))
        (eq)
        (case_of_expr
            (case)
            (value_expr (value_qid (lower_case_identifier)))
            (of)
            (virtual_open_section)
            (case_of_branch
                (pattern (lower_pattern (lower_case_identifier)))
                (arrow)
                (case_of_expr
                    (case)
                    (value_expr (value_qid (lower_case_identifier)))
                    (of)
                    (virtual_open_section)
                    (case_of_branch
                        (pattern (lower_pattern (lower_case_identifier)))
                        (arrow)
                        (case_of_expr
                            (case)
                            (value_expr)
                            (value_qid (lower_case_identifier))
                            (of)
                            (virtual_open_section)
                            (case_of_branch
                                (pattern (lower_pattern (lower_case_identifier)))
                                (arrow)
                                (value_expr (value_qid (lower_case_identifier)))
                            )
                        )
                    )
                    (virtual_end_decl)
                    (case_of_branch
                        (pattern (anything_pattern (underscore)))
                        (arrow)
                        (value_expr (value_qid (lower_case_identifier)))
                    )
                    (virtual_end_section)
                )
            )
        )
    )
    (virtual_end_decl)
)


=====================================
let with two variables and case
=====================================

init session =
    let
        feedTab =
            case Session.cred session of
                Just cred ->
                    YourFeed cred

                Nothing ->
                    GlobalFeed

        loadTags =
            Http.toTask Tag.list
    in
    abcd

---
(file
    (value_declaration
        (function_declaration_left
            (lower_case_identifier) (lower_pattern (lower_case_identifier))
        )
        (eq)
        (let_in_expr
            (let)
            (virtual_open_section)
            (value_declaration
                (function_declaration_left
                    (lower_case_identifier)
                )
                (eq)
                (case_of_expr
                    (case)
                    (function_call_expr (value_expr (value_qid (upper_case_identifier) (dot) (lower_case_identifier))) (value_expr (value_qid (lower_case_identifier))))
                    (of)
                    (virtual_open_section)
                    (case_of_branch
                        (pattern (union_pattern (upper_case_qid (upper_case_identifier)) (lower_pattern (lower_case_identifier))))
                        (arrow)
                        (function_call_expr (value_expr (upper_case_qid (upper_case_identifier))) (value_expr (value_qid (lower_case_identifier))))
                    )
                    (virtual_end_decl)
                    (case_of_branch
                        (pattern (union_pattern (upper_case_qid (upper_case_identifier))))
                        (arrow)
                        (value_expr (upper_case_qid (upper_case_identifier)))
                    )
                    (virtual_end_section)
                )
            )
            (value_declaration
                (function_declaration_left (lower_case_identifier))
                (eq)
                (function_call_expr (value_expr (value_qid (upper_case_identifier) (dot) (lower_case_identifier))) (value_expr (value_qid (upper_case_identifier) (dot) (lower_case_identifier))))
            )
            (virtual_end_section)
            (in)
            (value_expr
                (value_qid (lower_case_identifier))
            )
        )
    )
    (virtual_end_decl))

