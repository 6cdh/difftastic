==================================
Functions with typed parameters
==================================

function greeter(person: string) {
  return "Hello, " + person;
}

function foo<T>(x: T): T {

}

function foo<T, U>(a: T[], f: (x: T) => U): U[] {

}

---

(program
  (expression_statement
    (function
      (identifier)
      (call_signature (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type)))))
      (statement_block
        (return_statement (math_op (string) (identifier))))))
  (expression_statement
    (function
      (identifier)
      (call_signature
        (type_parameters (type_parameter (identifier)))
        (formal_parameters (required_parameter (identifier) (type_annotation (type_reference (identifier)))))
        (type_annotation (type_reference (identifier))))
        (statement_block)))
  (expression_statement
    (function
      (identifier)
      (call_signature
        (type_parameters (type_parameter (identifier)) (type_parameter (identifier)))
        (formal_parameters
          (required_parameter (identifier) (type_annotation (array_type (type_reference (identifier)))))
          (required_parameter
            (identifier)
            (type_annotation
              (function_type
                (formal_parameters (required_parameter (identifier) (type_annotation (type_reference (identifier))))) (type_reference (identifier))))))
        (type_annotation (array_type (type_reference (identifier)))))
      (statement_block))))

==================================
Function calls with type arguments
==================================

const lines = new Array<DiffLine>()

---

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (function_call (new_expression (identifier)) (type_arguments (type_reference (identifier))) (arguments)))))

==================================
Arrow functions and generators with call signatures
==================================

<A>(amount, interestRate, duration): number => 2

function* foo<A>(amount, interestRate, duration): number {
	yield amount * interestRate * duration / 12
}

---

(program
  (expression_statement
    (arrow_function
      (call_signature (type_parameters (type_parameter (identifier))) (formal_parameters (required_parameter (identifier)) (required_parameter (identifier)) (required_parameter (identifier))) (type_annotation (predefined_type)))
      (number)))
  (expression_statement
    (generator_function
      (identifier)
      (call_signature (type_parameters (type_parameter (identifier))) (formal_parameters (required_parameter (identifier)) (required_parameter (identifier)) (required_parameter (identifier))) (type_annotation (predefined_type)))
      (statement_block (expression_statement (yield_expression (math_op (math_op (math_op (identifier) (identifier)) (identifier)) (number))))))))

==================================
Arrow function with parameter named async
==================================

const x = async => async;

---

(program
  (lexical_declaration (variable_declarator (identifier) (arrow_function (identifier) (identifier)))))

==================================
Super
==================================

class A extends B {
    constructor(x: number, y: number) {
        super(x);
    }
    public toString() {
        return super.toString() + " y=" + this.y;
    }
}

---

(program
  (expression_statement
    (class
      (identifier)
      (class_heritage (extends_clause (type_reference (identifier))))
      (class_body
        (method_definition
          (property_identifier)
          (call_signature
            (formal_parameters
              (required_parameter (identifier) (type_annotation (predefined_type)))
              (required_parameter (identifier) (type_annotation (predefined_type)))))
          (statement_block
            (expression_statement (function_call (super) (arguments (identifier))))))
        (method_definition
          (accessibility_modifier)
          (property_identifier)
          (call_signature (formal_parameters))
          (statement_block
            (return_statement
              (math_op
                (math_op (function_call (member_access (super) (property_identifier)) (arguments)) (string))
                (member_access (this_expression) (property_identifier))))))))))
