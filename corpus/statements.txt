=====================================
Import statements
=====================================

import Browser
import Html.Events
import Html.Events.Test

---

(file
  (import_clause
    (upper_case_qid (upper_case_identifier))
  )
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))
  )
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier) (upper_case_identifier))
  )
)

=====================================
Import statements with exposing
=====================================

import Html.Events exposing (onClick)
import Html.Events exposing (onClick, onDoubleClick)
import Html exposing (Html, button, div, text)

---

(file
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))) (exposing_list (exposed_type (lower_case_identifier))
  )
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))) (exposing_list (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier))
  )
  (import_clause
    (upper_case_qid (upper_case_identifier))) (exposing_list (exposed_type (upper_case_identifier)) (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier))
  )
)

=====================================
Import statements with as clause
=====================================

import Dict.Any as AnyDict exposing (AnyDict)
import Remedy.ScreenId as ScreenId exposing (ScreenId)
import Remedy.ScreenList as ScreenList

---

(file
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))) (as_clause (upper_case_identifier)) (exposing_list (exposed_type (upper_case_identifier))
  )
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))) (as_clause (upper_case_identifier)) (exposing_list (exposed_type (upper_case_identifier))
  )
  (import_clause
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))) (as_clause (upper_case_identifier)
  )
)

=====================================
module statement
=====================================

module Main
module Page.View

---

(file
  (module_declaration
    (upper_case_qid (upper_case_identifier))
  )
  (module_declaration
    (upper_case_qid (upper_case_identifier) (upper_case_identifier))
  )
)

=====================================
module statement with exposing
=====================================

module Main exposing (view)
module Main exposing (main, update, view)
module Main exposing (Msg(..), main, update, view)

---

(file
  (module_declaration
    (upper_case_qid (upper_case_identifier)) (exposing_list (exposed_type (lower_case_identifier)))
  )
  (module_declaration
    (upper_case_qid (upper_case_identifier)) (exposing_list (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier)))
  )
  (module_declaration
    (upper_case_qid (upper_case_identifier)) (exposing_list (exposed_type (upper_case_identifier)) (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier)) (exposed_type (lower_case_identifier)))
  )
)

=====================================
One line comments
=====================================

-- MODEL
-- update
-- more words

---

(file
  (line_comment)
  (line_comment)
  (line_comment)
)

=====================================
Block comments
=====================================

{- one line -}
{- a multiline comment
  how nice
-}
{-| Returns a dictionary mapping `ScreenId` to its problems, if any.
-}
{--}
add x y = x + y
--}

---

(file
  (block_comment)
  (block_comment)
  (block_comment)
  (block_comment)
  (func_statement (lower_case_identifier) (func_param) (func_param) (func_param) (lower_case_identifier)) 
  (line_comment)
)

=====================================
Type statement
=====================================

type Msg
    = Increment

type Msg
    = Increment
    | Decrement

type Msg
    = Increment
    | Decrement
    | NoOp

---

(file
  (type_declaration (upper_case_identifier) (union_variant (upper_case_identifier)))
  
  (type_declaration (upper_case_identifier) (union_variant (upper_case_identifier)) (union_variant (upper_case_identifier)))
  
  (type_declaration (upper_case_identifier) (union_variant (upper_case_identifier)) (union_variant (upper_case_identifier)) (union_variant (upper_case_identifier)))
  
)

=====================================
Function statement with function call and inline record
=====================================

main =
    Browser.sandbox { init = 0, update = update, view = view }

---

(file
  (func_statement (lower_case_identifier)
    (func_call (upper_case_identifier) (lower_case_identifier)
        (func_call_params
            (inline_record
                (record_entry) (int)
                (record_entry) (lower_case_identifier)
                (record_entry) (lower_case_identifier)
            )
        )
    )
  )
)

=====================================
Function statement with case
=====================================

update msg model =
    case msg of
        Increment ->
            model + 1

        Decrement ->
            model - 1

---

(file
  (func_statement (lower_case_identifier) (func_param) (func_param)
    (case_call (func_param)
        (type_declaration)
            (func_param) (int)
        (type_declaration)
            (func_param) (int)
    )
  )
)

=====================================
Strings
=====================================

type alias String1 =
                  ""

type alias String2 =
                  "15131465"

type alias String3 =
                  "string1"

type alias String4 =
                  "string{(*)]+]}"

type alias String5 =
                  "string with space"

type alias String6 =
                  """
                  multiline

                  """


---

(file
  (type_alias (upper_case_identifier) (string))
  (type_alias (upper_case_identifier) (string))
  (type_alias (upper_case_identifier) (string))
  (type_alias (upper_case_identifier) (string))
  (type_alias (upper_case_identifier) (string))
  (type_alias (upper_case_identifier) (string))
)


=====================================
Tuples
=====================================

type alias Tuple1 =
                  ()
type alias Tuple2 =
                  (0, 15)
type alias Tuple3 =
                  (0,15)
type alias Tuple4 =
                  ("string",  "string")

---

(file
  (type_alias (upper_case_identifier) (tuple))
  (type_alias (upper_case_identifier) (tuple (int) (int)))
  (type_alias (upper_case_identifier) (tuple (int) (int)))
  (type_alias (upper_case_identifier) (tuple (string) (string)))
)

=====================================
Function statement with list
=====================================

view model =
    div []
        [ button [ onClick Decrement ] [ text "-" ]
        , div [] [ text (String.fromInt model) ]
        , button [ onClick Increment ] [ text "+" ]
        ]

---

(file
  (func_statement (lower_case_identifier) (func_param)
    (func_call (lower_case_identifier) 
      (func_call_params 
        (list)
        (list
          (func_call (lower_case_identifier) (func_call_params 
            (list (func_call (lower_case_identifier) (upper_case_identifier))) 
            (list (func_call (lower_case_identifier) (func_call_params (string))))))
          (func_call (lower_case_identifier) (func_call_params 
            (list) 
            (list (func_call (lower_case_identifier)) (func_call (lower_case_identifier)) (func_param))))
          (func_call (lower_case_identifier) (func_call_params 
            (list (func_call (lower_case_identifier) (upper_case_identifier))) 
            (list (func_call (lower_case_identifier) (func_call_params (string)))))))
        )
    )
  )
)

=====================================
Function statement with comment and type annotation
=====================================


{-| Returns a dictionary mapping `ScreenId` to its problems, if any.
-}
problemsByScreenId : List Problem -> AnyDict String ScreenId (List ScreenProblem)
problemsByScreenId problems =
    let
        assocById problem =
            case problem of
                ContentProblem (WithScreen screenId prob) ->
                    Just ( screenId, prob )

                _ ->
                    Nothing

        groupById =
            List.foldl
                (\( screenId, problem ) acc -> Util.AnyDict.collect screenId problem acc)
                (AnyDict.empty ScreenId.toString)
    in
    List.filterMap assocById problems
        |> groupById
---

(file
)



=====================================
Type statement with payload
=====================================

type Problem
    = ContentProblem ValidationProblem
    | GenericProblem String
    | MetaProblem String


type ValidationProblem
    = WithScreen ScreenId ScreenProblem
    | RequiresAtLeastOneScreen
    | ScreenListProblem ScreenList.ValidationProblem


type ScreenProblem
    = WithElement Int ElementProblem
    | ScreenIsEmpty
    | ScreenIsUnreachable


type ElementProblem
    = InvalidElement String
    | InvalidScreenTarget
    | InvalidScreenTargetCausesCycle

---

(file
  (type_declaration (upper_case_identifier) 
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier)))) 
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier)))) 
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier))))
  )
  
  (type_declaration (upper_case_identifier) 
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier))) (type_ref (upper_case_qid (upper_case_identifier)))) 
  (union_variant (upper_case_identifier))
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier) (upper_case_identifier))))
  )
  
  (type_declaration (upper_case_identifier) 
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier))) (type_ref (upper_case_qid (upper_case_identifier)))) 
  (union_variant (upper_case_identifier))
  (union_variant (upper_case_identifier))
  )

  (type_declaration (upper_case_identifier) 
  (union_variant (upper_case_identifier) (type_ref (upper_case_qid (upper_case_identifier)))) 
  (union_variant (upper_case_identifier))
  (union_variant (upper_case_identifier))
  )
  
)