============================================
Do statements
============================================

local x, y = 0, 1, 9;

do
  return x == y and true or false;
end

---

(program
  (local_variable_declaration (variable_declarator (identifier) (identifier))
    (number) (number) (number))
      (do_statement
        (return_statement
          (binary_operation
            (binary_operation
              (binary_operation (identifier) (identifier))
              (true))
            (false)))))

============================================
If clauses
============================================

if num < 42 then
  asnwer = "It's over";
elseif num > 42 then
  asnwer = "Almost...";
else
  asnwer = "Let there be light!";
end

---

(program
  (if_statement
    (condition_expression (binary_operation (identifier) (number)))
      (variable_declaration (variable_declarator (identifier))
        (string))
    (condition_expression (binary_operation (identifier) (number)))
      (variable_declaration (variable_declarator (identifier))
        (string))
    (variable_declaration (variable_declarator (identifier))
      (string))))

============================================
While statements
============================================

while num < 0 do
  'whatever i have to add declarations first'
end

---

(program
  (while_statement
    (condition_expression
      (binary_operation (identifier) (number)))
    (expression (string))))

============================================
Repeat statements
============================================

repeat
  'whatever i have to add declarations first'
until num < 0

---

(program
  (repeat_statement
    (expression (string))
  (condition_expression
    (binary_operation (identifier) (number)))))

============================================
For statement
============================================

for i = 1, 42 do
  'whatever i have to add declarations first'
end

for i = 1, #someTable do
  'whatever i have to add declarations first'
end

---

(program
  (for_statement
    (loop_expression (identifier) (number) (number))
      (expression (string)))

  (for_statement
    (loop_expression (identifier) (number) (unary_operation (identifier)))
      (expression (string))))

============================================
For in statements
============================================

for key, val in {} do
  return val;
end

---

(program
  (for_in_statement
    (loop_expression (identifier) (identifier) (table))
      (return_statement (identifier))))

============================================
Goto statements
============================================

goto loopLabel;

---

(program
  (goto_statement (identifier)))

============================================
Break statements
============================================

for i = 1, 10 do
  if i == 5 then
    break;
  end
end

---

(program
  (for_statement
    (loop_expression (identifier) (number) (number))
      (if_statement
        (condition_expression
          (binary_operation (identifier) (number)))
            (break_statement))))

============================================
Label statements
============================================

:: someLuaLabel ::

---

(program
  (label_statement (identifier)))
