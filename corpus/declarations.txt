============================================
Single const declarations without types
============================================

package main

const zero = 0
const one, two = 1, 2
const three, four, five = 3, 4, 5

----

(source_file
  (package_clause (package_name))
  (const_declaration (const_spec
    (variable_name)
    (expression_list (int_literal))))
  (const_declaration (const_spec
    (variable_name)
    (variable_name)
    (expression_list (int_literal) (int_literal))))
  (const_declaration (const_spec
    (variable_name)
    (variable_name)
    (variable_name)
    (expression_list (int_literal) (int_literal) (int_literal)))))

============================================
Single const declarations with types
============================================

package main

const zero int = 0
const one, two uint64 = 1, 2

----

(source_file
  (package_clause (package_name))
  (const_declaration (const_spec
    (variable_name)
    (type_name)
    (expression_list (int_literal))))
  (const_declaration (const_spec
    (variable_name)
    (variable_name)
    (type_name)
    (expression_list (int_literal) (int_literal)))))

============================================
Grouped const declarations
============================================

package main

const (
  zero = 0
  one = 1
)

----

(source_file
  (package_clause (package_name))
  (const_declaration
    (const_spec
      (variable_name)
      (expression_list (int_literal)))
    (const_spec
      (variable_name)
      (expression_list (int_literal)))))

============================================
Const declarations with implicit values
============================================

package main

const (
  zero = iota
  one
  two
)

----

(source_file
  (package_clause (package_name))
  (const_declaration
    (const_spec
      (variable_name)
      (expression_list (variable_name)))
    (const_spec
      (variable_name))
    (const_spec
      (variable_name))))

============================================
Var declarations without types
============================================

package main

var zero = 0
var one, two = 1, 2
var three, four, five = 3, 4, 5

----

(source_file
  (package_clause (package_name))
  (var_declaration (var_spec
    (variable_name)
    (expression_list (int_literal))))
  (var_declaration (var_spec
    (variable_name)
    (variable_name)
    (expression_list (int_literal) (int_literal))))
  (var_declaration (var_spec
    (variable_name)
    (variable_name)
    (variable_name)
    (expression_list (int_literal) (int_literal) (int_literal)))))

============================================
Var declarations with types
============================================

package main

var zero int = 0
var one, two uint64 = 1, 2

----

(source_file
  (package_clause (package_name))
  (var_declaration (var_spec
    (variable_name)
    (type_name)
    (expression_list (int_literal))))
  (var_declaration (var_spec
    (variable_name)
    (variable_name)
    (type_name)
    (expression_list (int_literal) (int_literal)))))

============================================
Var declarations with no expressions
============================================

package main

var zero int
var one, two uint64

----

(source_file
  (package_clause (package_name))
  (var_declaration (var_spec
    (variable_name)
    (type_name)))
  (var_declaration (var_spec
    (variable_name)
    (variable_name)
    (type_name))))

============================================
Grouped var declarations
============================================

package main

var (
  zero = 0
  one = 1
)

----

(source_file
  (package_clause (package_name))
  (var_declaration
    (var_spec
      (variable_name)
      (expression_list (int_literal)))
    (var_spec
      (variable_name)
      (expression_list (int_literal)))))

============================================
Function declarations
============================================

package main

func f1() {}
func f2(a int, b, c, d string) int {}
func f2() (int, error) {}
func f2() (result int, err error) {}

---

(source_file
  (package_clause (package_name))
  (function_declaration
    (variable_name)
    (parameters)
    (block))
  (function_declaration
    (variable_name)
    (parameters
      (parameter_declaration (variable_name) (type_name))
      (variable_name)
      (variable_name)
      (parameter_declaration (variable_name) (type_name)))
    (type_name)
    (block))
  (function_declaration
    (variable_name)
    (parameters)
    (parameters
      (variable_name)
      (variable_name))
    (block))
  (function_declaration
    (variable_name)
    (parameters)
    (parameters
      (parameter_declaration (variable_name) (type_name))
      (parameter_declaration (variable_name) (type_name)))
    (block)))

============================================
Single-line function declarations
============================================

package main

func f1() { a() }
func f2() { a(); b() }
func f3() { a(); b(); }

---

(source_file
  (package_clause (package_name))
  (function_declaration
    (variable_name)
    (parameters)
    (block
      (call_expression (variable_name))))
  (function_declaration
    (variable_name)
    (parameters)
    (block
      (call_expression (variable_name))
      (call_expression (variable_name))))
  (function_declaration
    (variable_name)
    (parameters)
    (block
      (call_expression (variable_name))
      (call_expression (variable_name)))))

============================================
Variadic function declarations
============================================

package main

func f1(a ...*int) {}
func f2(...int) {}
func f3(a, ...bool) {}

---

(source_file
  (package_clause (package_name))
  (function_declaration
    (variable_name)
    (parameters
      (parameter_declaration (variable_name) (pointer_type (type_name))))
    (block))
  (function_declaration
    (variable_name)
    (parameters
      (parameter_declaration (type_name)))
    (block))
  (function_declaration
    (variable_name)
    (parameters
      (variable_name)
      (parameter_declaration (type_name)))
    (block)))

============================================
Method declarations
============================================

package main

func (self Person) Equals(other Person) bool {}
func (v *Value) ObjxMap(optionalDefault ...(Map)) Map {}

---

(source_file
  (package_clause (package_name))
  (method_declaration
    (parameters
      (parameter_declaration (variable_name) (type_name)))
    (field_name)
    (parameters
      (parameter_declaration (variable_name) (type_name)))
    (type_name)
    (block))
  (method_declaration
    (parameters
      (parameter_declaration (variable_name) (pointer_type (type_name))))
    (field_name)
    (parameters (parameter_declaration (variable_name) (parenthesized_type (type_name))))
    (type_name)
    (block)))

============================================
Type declarations
============================================

package main

type a b
type (
  a b
  c d
)

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec (type_name) (type_name)))
  (type_declaration
    (type_spec (type_name) (type_name))
    (type_spec (type_name) (type_name))))
