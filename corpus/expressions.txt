============================================
Call expressions
============================================

package main

func main() {
  a(b, c...)

  a(
    b,
    c,
  )

  a(
    b,
    c...,
  )
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (call_expression
      (variable_name)
      (variable_name)
      (variable_name))
    (call_expression
      (variable_name)
      (variable_name)
      (variable_name))
    (call_expression
      (variable_name)
      (variable_name)
      (variable_name)))))

============================================
Nested call expressions
============================================

package main

func main() {
  a(b(c(d)))
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (call_expression (variable_name)
      (call_expression (variable_name)
        (call_expression (variable_name)
          (variable_name)))))))

============================================
Calls to 'make' and 'new'
============================================

package main

func main() {
  make(chan<- int)

  // `new` and `make` can also be used as variable names
  make(chan<- int, (new - old), make.stuff)

  make(chan<- int, 5, 10)
  new(map[string]string)
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (call_expression
      (variable_name)
      (channel_type (type_name)))
    (comment)
    (call_expression
      (variable_name)
      (channel_type (type_name))
      (parenthesized_expression (binary_expression (variable_name) (variable_name)))
      (selector_expression (variable_name) (field_name)))
    (call_expression
      (variable_name)
      (channel_type (type_name))
      (int_literal)
      (int_literal))
    (call_expression
      (variable_name)
      (map_type (type_name) (type_name))))))

============================================
Selector expressions
============================================

package main

func main() {
  a.b.c()
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (call_expression
      (selector_expression
        (selector_expression (variable_name) (field_name))
        (field_name))))))

============================================
Indexing expressions
============================================

package main

func main() {
  a[1]
  b[:]
  c[1:]
  d[1:2]
  e[:2:3]
  f[1:2:3]
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (index_expression (variable_name) (int_literal))
    (slice_expression (variable_name))
    (slice_expression (variable_name) (int_literal))
    (slice_expression (variable_name) (int_literal) (int_literal))
    (slice_expression (variable_name) (int_literal) (int_literal))
    (slice_expression (variable_name) (int_literal) (int_literal) (int_literal)))))

============================================
Type assertion expressions
============================================

package main

func main() {
  a.(p.Person)
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (type_assertion_expression
      (variable_name)
      (qualified_type (package_name) (type_name))))))

============================================
Type conversion expressions
============================================

package main

func main() {
  []a.b(c.d)
  ([]a.b)(c.d)
  e.f(g)
  (e.f)(g)
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (type_conversion_expression
      (slice_type (qualified_type (package_name) (type_name)))
      (selector_expression (variable_name) (field_name)))
    (type_conversion_expression
      (parenthesized_type (slice_type (qualified_type (package_name) (type_name))))
      (selector_expression (variable_name) (field_name)))
    (call_expression
      (selector_expression (variable_name) (field_name))
      (variable_name))
    (call_expression
      (parenthesized_expression (selector_expression (variable_name) (field_name)))
      (variable_name)))))

============================================
Unary expressions
============================================

package main

func main() {
  !<-a
  *foo()
}

---

(source_file
  (package_clause (package_name))
  (function_declaration (variable_name) (parameters) (block
    (unary_expression (unary_expression (variable_name)))
    (unary_expression (call_expression (variable_name))))))
