================================================================================
cond multi clause
================================================================================

cond do
  1 -> "a"
  2 -> "b"
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (stab_expr
        (integer)
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expr
        (integer)
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
cond single clause
================================================================================

cond do
  {a} -> "b"
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (stab_expr
        (tuple
          (identifier))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
cond multi clause multi line body
================================================================================

cond do
  1 -> "a"
  2 ->
    a.call()
    5
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (stab_expr
        (integer)
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expr
        (integer)
        (dot_call
          (identifier)
          (identifier)
          (arguments))
        (integer)))))

================================================================================
cond with parens
================================================================================

cond do
  (negated = false) && :boolean in List.wrap(b) ->
    1
  true ->
    :unknown
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (stab_expr
        (binary_op
          (block
            (binary_op
              (identifier)
              (false)))
          (binary_op
            (atom)
            (dot_call
              (module)
              (identifier)
              (arguments
                (identifier)))))
        (integer))
      (stab_expr
        (true)
        (atom)))))
