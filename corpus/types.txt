============================================
Qualified type names
============================================

package main

type a b.c

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (qualified_type (package_name) (type_name)))))

============================================
Array types
============================================

package main

type a [2+2]c

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (array_type
        (binary_expression (int_literal) (int_literal))
        (type_name)))))

============================================
Slice types
============================================

package main

type a []c
type b [][]d

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (slice_type (type_name))))
  (type_declaration
    (type_spec
      (type_name)
      (slice_type (slice_type (type_name))))))

============================================
Struct types
============================================

package main

type s1 struct {}

type s2 struct { Person }

type s2 struct {
  f, g int
}

type s3 struct {
  // an embedded struct
  p.s1

  // a tag
  h int `json:"h"`
}

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (struct_type)))
  (type_declaration
    (type_spec
      (type_name)
      (struct_type (field_declaration (type_name)))))
  (type_declaration
    (type_spec
      (type_name)
      (struct_type
        (field_declaration
          (field_name)
          (field_name)
          (type_name)))))
  (type_declaration
    (type_spec
      (type_name)
      (struct_type
        (comment)
        (field_declaration
          (qualified_type (package_name) (type_name)))
        (comment)
        (field_declaration
          (field_name)
          (type_name)
          (raw_string_literal))))))

============================================
Interface types
============================================

package main

type i1 interface {}

type i1 interface { io.Reader }

type i2 interface {
  i1
  io.Reader
  SomeMethod(s string) error
}

---

(source_file
  (package_clause (package_name))
  (type_declaration (type_spec
    (type_name)
    (interface_type)))
  (type_declaration (type_spec
    (type_name)
    (interface_type
      (qualified_type (package_name) (type_name)))))
  (type_declaration (type_spec
    (type_name)
    (interface_type
      (type_name)
      (qualified_type (package_name) (type_name))
      (method_spec
        (field_name)
        (parameters (parameter_declaration (variable_name) (type_name)))
        (type_name))))))

============================================
Map types
============================================

package main

type m1 map[string]error

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (map_type (type_name) (type_name)))))

============================================
Pointer types
============================================

package main

type (
  p1 *string
  p2 **p1
)

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (pointer_type (type_name)))
    (type_spec
      (type_name)
      (pointer_type (pointer_type (type_name))))))

============================================
Channel types
============================================

package main

type (
  c1 chan<- chan int
  c2 chan<- chan<- struct{}
  c3 chan<- <-chan int
)

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (channel_type (channel_type (type_name))))
    (type_spec
      (type_name)
      (channel_type (channel_type (struct_type))))
    (type_spec
      (type_name)
      (channel_type (channel_type (type_name))))))

============================================
Function types
============================================

package main

type (
  a func(int) int
  b func(int, *string) (bool, error)
)

---

(source_file
  (package_clause (package_name))
  (type_declaration
    (type_spec
      (type_name)
      (function_type
        (parameters
          (variable_name))
        (type_name)))
    (type_spec
      (type_name)
      (function_type
        (parameters
          (variable_name)
          (parameter_declaration (pointer_type (type_name))))
        (parameters
          (variable_name)
          (variable_name))))))
