================================================================================
module parens call
================================================================================

A.B.c("a")

--------------------------------------------------------------------------------

(program
  (expr
    (dot_call
      (module)
      (identifier)
      (args
        (expr
          (string
            (string_start)
            (string_content)
            (string_end)))))))

================================================================================
bare keyword list
================================================================================

Module.func!(
  args,
  aliases: [r: :require, p: :parallel, e: :eval, c: :config],
  strict: [
    parallel: :boolean,
    require: :keep
  ]
)

--------------------------------------------------------------------------------

(program
  (expr
    (dot_call
      (module)
      (identifier)
      (args
        (expr
          (identifier))
        (bare_keyword_list
          (keyword)
          (expr
            (list
              (bare_keyword_list
                (keyword)
                (expr
                  (atom))
                (keyword)
                (expr
                  (atom))
                (keyword)
                (expr
                  (atom))
                (keyword)
                (expr
                  (atom)))))
          (keyword)
          (expr
            (list
              (bare_keyword_list
                (keyword)
                (expr
                  (atom))
                (keyword)
                (expr
                  (atom))))))))))

================================================================================
local var call
================================================================================

a.()()

--------------------------------------------------------------------------------

(program
  (expr
    (call
      (dot_call
        (identifier)
        (args))
      (args))))

================================================================================
operator call
================================================================================

Kernel.+(1, 1)

--------------------------------------------------------------------------------

(program
  (expr
    (dot_call
      (module)
      (args
        (expr
          (integer))
        (expr
          (integer))))))

================================================================================
reserved word call
================================================================================

a.and

--------------------------------------------------------------------------------

(program
  (expr
    (dot_call
      (identifier))))

================================================================================
access call followed by dot call
================================================================================

cover[:tool].start(compile_path, cover)

--------------------------------------------------------------------------------

(program
  (expr
    (dot_call
      (access_call
        (expr
          (identifier))
        (expr
          (atom)))
      (identifier)
      (args
        (expr
          (identifier))
        (expr
          (identifier))))))

================================================================================
qualified call followed by dot call
================================================================================

quote do
  unquote(__MODULE__).profile(
    fn ->
      unquote(Code.string_to_quoted!(code_string))
    end,
    unquote(Macro.escape(Enum.map(opts, &parse_opt/1)))
  )
end

--------------------------------------------------------------------------------

(program
  (expr
    (call
      (identifier)
      (do_block
        (expr
          (dot_call
            (qualified_call
              (identifier)
              (args
                (expr
                  (identifier))))
            (identifier)
            (args
              (expr
                (anonymous_function
                  (stab_expr
                    (expr
                      (qualified_call
                        (identifier)
                        (args
                          (expr
                            (dot_call
                              (module)
                              (identifier)
                              (args
                                (expr
                                  (identifier)))))))))))
              (expr
                (qualified_call
                  (identifier)
                  (args
                    (expr
                      (dot_call
                        (module)
                        (identifier)
                        (args
                          (expr
                            (dot_call
                              (module)
                              (identifier)
                              (args
                                (expr
                                  (identifier))
                                (expr
                                  (unary_op
                                    (expr
                                      (binary_op
                                        (expr
                                          (identifier))
                                        (expr
                                          (integer))))))))))))))))))))))

================================================================================
keyword args
================================================================================

if true do
  raise Error, a: 1, b: 2, c: 3
end

--------------------------------------------------------------------------------

(program
  (expr
    (call
      (identifier)
      (expr
        (literal))
      (do_block
        (expr
          (call
            (identifier)
            (expr
              (module))
            (bare_keyword_list
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer)))))))))

================================================================================
captured arg dot call
================================================================================

[1]
|> Enum.map(& &1.app)

--------------------------------------------------------------------------------

(program
  (expr
    (binary_op
      (expr
        (list
          (expr
            (integer))))
      (expr
        (dot_call
          (module)
          (identifier)
          (args
            (expr
              (unary_op
                (expr
                  (dot_call
                    (capture_op
                      (integer))
                    (identifier)))))))))))

================================================================================
captured arg dot call
================================================================================

Enum.reduce(funcs, result, & &1.(&2))

--------------------------------------------------------------------------------

(program
  (expr
    (dot_call
      (module)
      (identifier)
      (args
        (expr
          (identifier))
        (expr
          (identifier))
        (expr
          (unary_op
            (expr
              (dot_call
                (capture_op
                  (integer))
                (args
                  (expr
                    (capture_op
                      (integer))))))))))))

================================================================================
alias
================================================================================

alias ExUnit.{FailuresManifest, Test}

--------------------------------------------------------------------------------

(program
  (expr
    (call
      (identifier)
      (expr
        (dot_call
          (module)
          (tuple
            (expr
              (module))
            (expr
              (module))))))))

================================================================================
import
================================================================================

import Kernel, except: [@: 1, defmodule: 2, def: 1, def: 2, defp: 2, defmacro: 1, defmacro: 2, defmacrop: 2]

--------------------------------------------------------------------------------

(program
  (expr
    (call
      (identifier)
      (expr
        (module))
      (bare_keyword_list
        (keyword)
        (expr
          (list
            (bare_keyword_list
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer))
              (keyword)
              (expr
                (integer)))))))))

================================================================================
capture mfa
================================================================================

&Kernel.is_atom/1

--------------------------------------------------------------------------------

(program
  (expr
    (unary_op
      (expr
        (binary_op
          (expr
            (dot_call
              (module)
              (identifier)))
          (expr
            (integer)))))))

================================================================================
capture local
================================================================================

&local_function/1

--------------------------------------------------------------------------------

(program
  (expr
    (unary_op
      (expr
        (binary_op
          (expr
            (identifier))
          (expr
            (integer)))))))

================================================================================
anonymous capture
================================================================================

double = &(&1 * 2)

--------------------------------------------------------------------------------

(program
  (expr
    (binary_op
      (expr
        (identifier))
      (expr
        (unary_op
          (expr
            (block
              (expr
                (binary_op
                  (expr
                    (capture_op
                      (integer)))
                  (expr
                    (integer)))))))))))

================================================================================
operator capture
================================================================================

&>=/2

--------------------------------------------------------------------------------

(program
  (expr
    (unary_op
      (expr
        (binary_op
          (integer))))))

================================================================================
string dot call
================================================================================

:erlang."=<"(left, right)

--------------------------------------------------------------------------------

(program
  (expr
    (call
      (dot_call
        (atom)
        (string
          (string_start)
          (string_content)
          (string_end)))
      (args
        (expr
          (identifier))
        (expr
          (identifier))))))

================================================================================
macro call
================================================================================

h(== / 2)

--------------------------------------------------------------------------------

(program
  (expr
    (qualified_call
      (identifier)
      (args
        (expr
          (binary_op
            (integer)))))))
