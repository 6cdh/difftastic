=====================================
Subscript expressions
=====================================

a[1]
b[2, 3]
c[4, 5,]

---

(module
  (expression_statement (subscript (identifier) (number)))
  (expression_statement (subscript (identifier) (number) (number)))
  (expression_statement (subscript (identifier) (number) (number))))


=====================================
Subscript slice expressions
=====================================

a[:]
b[5:]
b[5:6, ...]
c[::]

---

(module
  (expression_statement (subscript
    (identifier)
    (slice)))
  (expression_statement (subscript
    (identifier)
    (slice (number))))
  (expression_statement (subscript
    (identifier)
    (slice (number) (number))
    (ellipsis)))
  (expression_statement (subscript
    (identifier)
    (slice))))

=====================================
Attribute references
=====================================

a.b.c

---

(module
  (expression_statement
    (attribute
      (attribute (identifier) (identifier))
      (identifier))))

=====================================
Call expressions
=====================================

__a__()
b(1)
c(e, f=g)
i(j, 5,)

---

(module
  (expression_statement (call
    (identifier)
    (argument_list)))
  (expression_statement (call
    (identifier)
    (argument_list (number))))
  (expression_statement (call
    (identifier)
    (argument_list
      (identifier)
      (keyword_argument (identifier) (identifier)))))
  (expression_statement (call
    (identifier)
    (argument_list (identifier) (number)))))

=====================================
Print used as an identifier
=====================================

print(a, b=c)
print(d, *e)
print(*f, **g,)
a(print)
def a(print):
  b
def a(printer=print):
  c
def a(*print):
  b
def a(**print):
  b
def print():
  a

---

(module
  (expression_statement (call
    (keyword_identifier)
    (argument_list
      (identifier)
      (keyword_argument (identifier) (identifier)))))
  (expression_statement (call
    (keyword_identifier)
    (argument_list
      (identifier)
      (list_splat_argument (identifier)))))
  (expression_statement (call
    (keyword_identifier)
    (argument_list
      (list_splat_argument (identifier))
      (dictionary_splat_argument (identifier)))))
  (expression_statement (call
    (identifier)
    (argument_list (keyword_identifier))))
  (function_definition
    (identifier)
    (parameters (keyword_identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (default_parameter (identifier) (keyword_identifier)))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (list_splat_parameter (identifier)))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (dictionary_splat_parameter (identifier)))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters)
    (expression_statement (identifier))))

=====================================
Calls with splats
=====================================

a(*b)
c(d, *e, **g)

---

(module
  (expression_statement (call
    (identifier)
    (argument_list
      (list_splat_argument (identifier)))))
  (expression_statement (call
    (identifier)
    (argument_list
      (identifier)
      (list_splat_argument (identifier))
      (dictionary_splat_argument (identifier))))))

=====================================
Math operators
=====================================

a + b * c ** d - e / 5
-5
+x
~x

---

(module
  (expression_statement
    (binary_operator
      (binary_operator
        (identifier)
        (binary_operator
          (identifier)
          (binary_operator
            (identifier)
            (identifier))))
      (binary_operator
        (identifier)
        (number))))
  (expression_statement (unary_operator (number)))
  (expression_statement (unary_operator (identifier)))
  (expression_statement (unary_operator (identifier))))

=====================================
Bitwise operators
=====================================

a << b | c >> d & e

---

(module
  (expression_statement
    (binary_operator
      (binary_operator
        (identifier)
        (identifier))
      (binary_operator
        (binary_operator
          (identifier)
          (identifier))
        (identifier)))))

=====================================
Boolean operators
=====================================

a or b and c
not d

---

(module
  (expression_statement
    (boolean_operator
      (identifier)
      (boolean_operator
        (identifier)
        (identifier))))
  (expression_statement
    (not_operator (identifier))))

=====================================
Comparison operators
=====================================

a < b <= c == d >= e > f
not a == b or c == d

---

(module
  (expression_statement
    (comparison_operator
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)))
  (expression_statement
    (not_operator (boolean_operator
      (comparison_operator (identifier) (identifier))
      (comparison_operator (identifier) (identifier))))))

====================================================
Assignments
====================================================

a = 1
a, b = 1, 2
a, = 1, 2
a[b] = c = d

---

(module
  (expression_statement
    (assignment
      (expression_list
        (identifier))
      (expression_list
        (number))))
  (expression_statement
    (assignment
      (expression_list
        (identifier)
        (identifier))
      (expression_list
        (number)
        (number))))
  (expression_statement
    (assignment
      (expression_list
        (identifier))
      (expression_list
        (number)
        (number))))
  (expression_statement
    (assignment
      (expression_list
        (subscript (identifier) (identifier)))
      (assignment
        (expression_list (identifier))
        (expression_list (identifier))))))

====================================================
Augmented assignments
====================================================

a += 1
b >>= 2
c //= 1

---

(module
  (expression_statement
    (augmented_assignment
      (expression_list (identifier))
      (expression_list (number))))
  (expression_statement
    (augmented_assignment
      (expression_list (identifier))
      (expression_list (number))))
  (expression_statement
    (augmented_assignment
      (expression_list (identifier))
      (expression_list (number)))))

====================================================
Yield expressions
====================================================

yield
yield 1
x = yield 2

---

(module
  (expression_statement (yield))
  (expression_statement (yield (expression_list (number))))
  (expression_statement
    (assignment
      (expression_list (identifier))
      (yield (expression_list (number))))))

====================================================
lambdas
====================================================

A = lambda b, c: d("e" % f)
B = lambda: True
C = lambda a, b = c, *d, **e: a

---

(module
  (expression_statement (assignment
    (expression_list (identifier))
    (expression_list (lambda
      (identifier)
      (identifier)
      (call
        (identifier)
        (argument_list
          (binary_operator (string) (identifier))))))))
  (expression_statement (assignment
    (expression_list (identifier))
    (expression_list (lambda (true)))))
  (expression_statement (assignment
    (expression_list (identifier))
    (expression_list (lambda
      (identifier)
      (default_parameter (identifier) (identifier))
      (list_splat_parameter (identifier))
      (dictionary_splat_parameter (identifier))
      (identifier))))))

=====================================
Conditional if expressions
=====================================

a = b if c
a = b if c else d
something() if a
something() if a else d
slice(1,1,1) if a else d

---

(module
  (expression_statement
    (assignment
      (expression_list (identifier))
      (expression_list
        (conditional_expression (identifier) (identifier)))))
  (expression_statement
    (assignment
      (expression_list (identifier))
      (expression_list
        (conditional_expression
          (identifier) (identifier) (identifier)))))
  (expression_statement
    (conditional_expression (call (identifier) (argument_list)) (identifier)))
  (expression_statement
    (conditional_expression (call (identifier) (argument_list)) (identifier) (identifier)))
  (expression_statement (conditional_expression
    (call (identifier) (argument_list (number) (number) (number)))
		(identifier) (identifier))))
