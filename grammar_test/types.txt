=======================================
Built-in types
=======================================

var x: string = 'hi';
var y: number;

---

(program
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (predefined_type))
    (string)))
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (predefined_type)))))

=======================================
Parenthesized types
=======================================

var x: (string);

---

(program
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (parenthesized_type (predefined_type))))))

=======================================
Object types
=======================================

let person: {name: string, age: number};

---

(program
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (object_type
      (property_signature (identifier) (type_annotation (predefined_type)))
      (property_signature (identifier) (type_annotation (predefined_type))))))))

=======================================
Array types
=======================================

let x: X[];

---

(program
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (array_type (identifier))))))

=======================================
Function types
=======================================

let x: (result: string) => any;

---

(program
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation
      (function_type
        (formal_parameters
          (required_parameter (identifier) (type_annotation (predefined_type))))
        (predefined_type))))))

=======================================
Type annotations in parenthesized expressions
=======================================

const range = (document: any).selection.createRange()

---

(program
  (variable_declaration (variable_declarator
    (identifier)
  (function_call
  (member_access
    (member_access (identifier) (type_annotation (predefined_type)) (identifier))
    (identifier))
  (arguments)))))

=======================================
Flow Maybe Types
=======================================

const editor: ?CodeEditor
const miscArray: ?T[]

---

(program
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (flow_maybe_type (identifier)))))
  (variable_declaration (variable_declarator
    (identifier)
    (type_annotation (flow_maybe_type (array_type (identifier)))))))

=======================================
Flow Import Types
=======================================

import type {UserID, User} from "./User.js";
import typeof {jimiguitar as GuitarT} from "./User.js";

---

(program
  (import_statement
    (import_clause
      (named_imports (import_specifier (identifier)) (import_specifier (identifier)))) (string))
  (import_statement
    (import_clause
      (named_imports (import_specifier (identifier) (identifier)))) (string)))

=======================================
Type alias declarations
=======================================

type FileMergeData = {
  document: Doc,
  headDocument: Doc,
  baseDocument: Doc,
  conflicts: ConflictInfo[]
}

type ConflictInfo = {
  start?: LineHandle,
  middle?: LineHandle,
  end?: LineHandle
}

---

(program
  (type_alias_declaration
    (identifier)
    (object_type
      (property_signature (identifier) (type_annotation (identifier)))
      (property_signature (identifier) (type_annotation (identifier)))
      (property_signature (identifier) (type_annotation (identifier)))
      (property_signature (identifier) (type_annotation (array_type (identifier))))))

  (type_alias_declaration
    (identifier)
    (object_type
      (property_signature (identifier) (type_annotation (identifier)))
      (property_signature (identifier) (type_annotation (identifier)))
      (property_signature (identifier) (type_annotation (identifier))))))

=======================================
Enum declarations
=======================================

enum Test {
    A,
    B,
    C = Math.floor(Math.random() * 1000),
    D = 10,
    E
}

enum Style {
    None = 0,
    Bold = 1,
    Italic = 2,
    Underline = 4,
    Emphasis = Bold | Italic,
    Hyperlink = Bold | Underline
}

---

(program
  (enum_declaration
    (identifier)
    (identifier)
    (identifier)
    (enum_assignment
      (identifier)
      (function_call
        (member_access (identifier) (identifier))
        (arguments (math_op (function_call (member_access (identifier) (identifier)) (arguments)) (number)))))
    (enum_assignment (identifier) (number))
    (identifier))
  (enum_declaration
    (identifier)
    (enum_assignment (identifier) (number))
    (enum_assignment (identifier) (number))
    (enum_assignment (identifier) (number))
    (enum_assignment (identifier) (number))
    (enum_assignment (identifier) (bitwise_op (identifier) (identifier)))
    (enum_assignment (identifier) (bitwise_op (identifier) (identifier)))))

=======================================
Interface declarations
=======================================

interface A { a: string; }

interface B extends A { b: string; }

interface Friend {
    name: string;
    favoriteColor?: string;
}

interface G<T, U extends B> {
    x: T;
    y: U;
}

---

(program
  (interface_declaration
    (identifier)
    (object_type (property_signature (identifier) (type_annotation (predefined_type)))))
  (interface_declaration
    (identifier)
    (interface_extends_clause (identifier))
    (object_type (property_signature (identifier) (type_annotation (predefined_type)))))
  (interface_declaration
    (identifier)
    (object_type
      (property_signature (identifier) (type_annotation (predefined_type)))
      (property_signature (identifier) (type_annotation (predefined_type)))))
  (interface_declaration
    (identifier)
    (type_parameters (type_parameter (identifier)) (type_parameter (identifier) (constraint (identifier))))
    (object_type
      (property_signature (identifier) (type_annotation (identifier)))
      (property_signature (identifier) (type_annotation (identifier))))))
