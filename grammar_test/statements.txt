=====================================
Import statements
=====================================

import a, b
import b.c as d

---

(module
  (import_statement
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_statement
    (aliased_import
      (dotted_name (identifier) (identifier))
      (identifier))))

=====================================
Import-from statements
=====================================

from a import b
from a import *
from a import (b, c)

---

(module
  (import_from_statement
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (dotted_name (identifier))
    (wildcard_import))
  (import_from_statement
    (dotted_name (identifier))
    (dotted_name (identifier))
    (dotted_name (identifier))))

=====================================
Print statements
=====================================

print a
print b, c

---

(module
  (print_statement (identifier))
  (print_statement (identifier) (identifier)))

=====================================
Print statements with redirection
=====================================

print >> a
print >> a, "b", "c"

---

(module
  (print_statement (chevron (identifier)))
  (print_statement (chevron (identifier)) (string) (string)))

=====================================
Assert statements
=====================================

assert a
assert b, c

---

(module
  (assert_statement (identifier))
  (assert_statement (identifier) (identifier)))

=====================================
Expression statements
=====================================

a
b + c

---

(module
  (expression_statement (identifier))
  (expression_statement (binary_operator (identifier) (identifier))))

=====================================
Delete statements
=====================================

del a[1], b[2]

---

(module
  (delete_statement (expression_list
    (subscript (identifier) (number))
    (subscript (identifier) (number)))))

=====================================
Control-flow statements
=====================================

while true:
  pass
  break
  continue

---

(module
  (while_statement (identifier)
    (pass_statement)
    (break_statement)
    (continue_statement)))

=====================================
Return statements
=====================================

return
return a + b, c
return not b

---

(module
  (return_statement)
  (return_statement (expression_list
    (binary_operator (identifier) (identifier))
    (identifier)))
  (return_statement (expression_list (not_operator (identifier)))))

=====================================
If statements
=====================================

if a:
  b
  c

---

(module
  (if_statement (identifier)
    (expression_statement (identifier))
    (expression_statement (identifier))))

=====================================
If else statements
=====================================

if a:
  b
elif c:
  d
else:
  f

---

(module
  (if_statement (identifier)
    (expression_statement (identifier))
    (elif_clause (identifier)
      (expression_statement (identifier)))
    (else_clause
      (expression_statement (identifier)))))

=====================================
Nested if statements
=====================================

if a:
  if b:
    c
  else:
    if e:
      f
g

---

(module
  (if_statement (identifier)
    (if_statement (identifier)
      (expression_statement (identifier))
      (else_clause
        (if_statement (identifier)
          (expression_statement (identifier))))))
  (expression_statement (identifier)))

=====================================
While statements
=====================================

while a:
  b

while c:
  d
else:
  e
  f

---

(module
  (while_statement (identifier)
    (expression_statement (identifier)))
  (while_statement (identifier)
    (expression_statement (identifier))
    (else_clause
      (expression_statement (identifier))
      (expression_statement (identifier)))))

=====================================
For statements
=====================================

for line, i in lines:
  print line
  for character, j in line:
    print character
else:
  print x

---

(module
  (for_statement
    (variables (identifier) (identifier))
    (expression_list (identifier))
    (print_statement (identifier))
    (for_statement
      (variables (identifier) (identifier))
      (expression_list (identifier))
      (print_statement (identifier)))
    (else_clause
      (print_statement (identifier)))))

=====================================
Try statements
=====================================

try:
  a
except b:
  c
except d as e:
  f
except g, h:
  i
except:
  j

try:
  a
finally:
  b

---

(module
  (try_statement
    (expression_statement (identifier))
    (except_clause (identifier)
      (expression_statement (identifier)))
    (except_clause (identifier) (identifier)
      (expression_statement (identifier)))
    (except_clause (identifier) (identifier)
      (expression_statement (identifier)))
    (except_clause
      (expression_statement (identifier))))
  (try_statement
    (expression_statement (identifier))
    (finally_clause
      (expression_statement (identifier)))))

=====================================
With statements
=====================================

with a as b:
  c

---

(module
  (with_statement
    (with_item (identifier) (identifier))
    (expression_statement (identifier))))

=====================================
Function definitions
=====================================

def a():
  b

def c(d):
  e

def g(g, h,):
  i

def i(a, b=c, *c, **d):
  a

---

(module
  (function_definition
    (identifier)
    (parameters)
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier) (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (default_parameter (identifier) (identifier))
      (list_splat_parameter (identifier))
      (dictionary_splat_parameter (identifier)))
    (expression_statement (identifier))))

==============================================
Function definitions with default parameters
==============================================

def a(b = 1, c = 2,):
  d

---

(module
  (function_definition
    (identifier)
    (parameters
      (default_parameter (identifier) (number))
      (default_parameter (identifier) (number)))
    (expression_statement (identifier))))

==============================================
Function definitions with list splat parameters
==============================================

def a(b, *c):
  d
  e

---

(module
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (list_splat_parameter (identifier)))
    (expression_statement (identifier))
    (expression_statement (identifier))))

======================================================
Function definitions with dictionary splat parameters
======================================================

def a(b, **c):
  print d

def e(*f, **g):
  print h

---

(module
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (dictionary_splat_parameter (identifier)))
    (print_statement (identifier)))

  (function_definition
    (identifier)
    (parameters
      (list_splat_parameter (identifier))
      (dictionary_splat_parameter (identifier)))
    (print_statement (identifier))))

====================================================
Class definitions
====================================================

class A:
  def b(self):
    return c
class B():
  pass
class B(method1):
  def method1(self):
    return

---

(module
  (class_definition
    (identifier)
    (function_definition
      (identifier)
      (parameters (identifier))
      (return_statement (expression_list (identifier)))))
 (class_definition
    (identifier)
    (pass_statement))
 (class_definition
    (identifier)
    (expression_list (identifier))
    (function_definition
      (identifier)
      (parameters (identifier))
      (return_statement))))

====================================================
Class definitions with superclasses
====================================================

class A(B, C):
  def d():
    e

---

(module
  (class_definition
    (identifier)
    (expression_list (identifier) (identifier))
    (function_definition
      (identifier)
      (parameters)
      (expression_statement (identifier)))))

====================================================
Decorated definitions
====================================================

@a.b
class C:
  @f()
  @d(1)
  @e(2, 3)
  @a(b=True)
  @a(*b)
  @a(**c)
  @a(1, b=True, *b, **c)
  def f():
    g

---

(module
  (decorated_definition
    (decorator (dotted_name (identifier) (identifier)))
    (class_definition
      (identifier)
      (decorated_definition
        (decorator
          (dotted_name (identifier))
          (arguments))
        (decorator
          (dotted_name (identifier))
          (arguments
            (number)))
        (decorator
          (dotted_name (identifier))
          (arguments
            (number) (number)))
        (decorator
          (dotted_name (identifier))
          (arguments
            (keyword_argument (identifier) (true))))
        (decorator
          (dotted_name (identifier))
          (arguments
            (list_splat_argument (identifier))))
        (decorator
          (dotted_name (identifier))
          (arguments
            (dictionary_splat_argument (identifier))))
        (decorator
          (dotted_name (identifier))
          (arguments
            (number)
            (keyword_argument (identifier) (true))
            (list_splat_argument (identifier))
            (dictionary_splat_argument (identifier))))
        (function_definition (identifier) (parameters) (expression_statement (identifier)))))))

====================================================
Raise statements
====================================================

raise
raise RuntimeError('NO')

---

(module
  (raise_statement)
  (raise_statement (expression_list
    (call (identifier) (string)))))

====================================================
Comments
====================================================

print a
# hi
print b # bye
print c

---

(module
  (print_statement (identifier))
  (comment)
  (print_statement (identifier))
  (comment)
  (print_statement (identifier)))

====================================================
Comments at different indentation levels
====================================================

if a:
  # one
# two
    # three
  b
    # four
  c

---

(module
  (if_statement (identifier)
    (comment)
    (comment)
    (comment)
    (expression_statement (identifier))
    (comment)
    (expression_statement (identifier))))

====================================================
Newline tokens followed by comments
====================================================

print "a"
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
---

(module (print_statement (string)) (comment))

====================================================
Global statements
====================================================

global a
global a, b

---

(module
  (global_statement (identifier))
  (global_statement (identifier) (identifier)))
