==================================
Ambient declarations
================================

declare class Error {
  constructor: Function
}

declare var foo: number;

declare function greet(greeting: string): void;

declare namespace myLib {
    function makeGreeting(s: string): string;
    let numberOfGreetings: number;

    interface LogOptions {
      verbose?: boolean;
    }
    interface AlertOptions {
      modal: boolean;
      title?: string;
      color?: string;
    }
}

declare class Greeter {
  constructor(greeting: string);

  greeting: string;
  showGreeting(): void;
}

---

(program
  (ambient_declaration
    (class
      (identifier)
      (class_body
        (public_field_definition (variable_declarator (identifier) (type_annotation (type_reference (identifier))))))))
  (ambient_declaration
    (ambient_variable (ambient_binding (identifier) (type_annotation (predefined_type)))))
  (ambient_declaration
    (ambient_function
      (identifier)
      (call_signature
        (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type))))
        (type_annotation (predefined_type)))))

  (ambient_declaration
    (ambient_namespace
      (identifier)
      (ambient_namespace_body
        (ambient_namespace_element
          (ambient_function
            (identifier)
            (call_signature
              (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type))))
              (type_annotation (predefined_type)))))
        (ambient_namespace_element
          (lexical_declaration (variable_declarator (identifier) (type_annotation (predefined_type)))))
        (ambient_namespace_element
          (interface_declaration
            (identifier)
            (object_type
              (property_signature (identifier) (type_annotation (predefined_type))))))
        (ambient_namespace_element
          (interface_declaration
            (identifier)
            (object_type
              (property_signature (identifier) (type_annotation (predefined_type)))
              (property_signature (identifier) (type_annotation (predefined_type)))
              (property_signature (identifier) (type_annotation (predefined_type)))))))))

  (ambient_declaration
    (class
      (identifier)
      (class_body
        (ambient_method_declaration
          (identifier) (call_signature (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type))))))
        (public_field_definition (variable_declarator (identifier) (type_annotation (predefined_type))))
        (ambient_method_declaration (identifier) (call_signature (formal_parameters) (type_annotation (predefined_type))))))))

==================================
Ambient exports
================================

export default function point(x: number, y: number) {
    return { x, y };
}

export default class A {}

---

(program
  (export_statement
    (function
      (identifier)
      (call_signature
        (formal_parameters
          (required_parameter (identifier) (type_annotation (predefined_type)))
          (required_parameter (identifier) (type_annotation (predefined_type)))))
          (statement_block
            (return_statement (object (identifier) (identifier))))))
  (export_statement (class (identifier) (class_body))))

==================================
Typeof types
================================

declare class Linter {
    static findConfiguration: typeof findConfiguration;
}

---

(program
  (ambient_declaration
    (class
      (identifier)
      (class_body
        (public_field_definition
          (variable_declarator
          (identifier)
          (type_annotation (type_query (identifier)))))))))

==================================
Export assignments
================================

export = Linter;

---

(program (export_statement (identifier)))

==================================
Property signatures with accessibility modifiers
================================

export interface IAppState {
  public readonly users: ReadonlyArray<User>
}

export class CloningRepository {
  public readonly id = CloningRepositoryID++
}


---

(program
  (export_statement
    (interface_declaration
      (identifier)
      (object_type
        (property_signature
          (accessibility_modifier)
          (readonly)
          (identifier)
          (type_annotation (type_reference (identifier) (type_arguments (type_reference (identifier)))))))))
  (export_statement
    (class
      (identifier)
      (class_body
        (public_field_definition
        (accessibility_modifier)
        (readonly)
        (variable_declarator (identifier) (math_op (identifier))))))))

==================================
Ambient type declarations
================================

declare type IndexableType = string | number | Date | Array<string | number | Date>;

---

(program
  (ambient_declaration
    (type_alias_declaration
      (identifier)
        (union_type
          (union_type
            (union_type (predefined_type) (predefined_type))
            (type_reference (identifier)))
            (type_reference
              (identifier)
              (type_arguments (union_type (union_type (predefined_type) (predefined_type)) (type_reference (identifier)))))))))

==================================
Ambient module declarations
================================

module Promise {
    var on: {}
    export function resolve<R>(value?: Thenable<R>): Promise<R>;
}

---
(program
  (module
    (identifier)
    (variable_declaration (variable_declarator
      (identifier)
      (type_annotation (object_type))))
    (export_statement (ambient_function
      (identifier)
      (call_signature
        (type_parameters (type_parameter (identifier)))
        (formal_parameters
          (optional_parameter
            (identifier)
            (type_annotation (type_reference (identifier) (type_arguments (type_reference (identifier)))))))
        (type_annotation (type_reference (identifier) (type_arguments (type_reference (identifier))))))))))

=================================
Accessibility modifiers as pair keywords
=================================

{ name, description, private: private_ }

---

(program (expression_statement (object (identifier) (identifier) (pair (accessibility_modifier) (identifier)))))

=================================
JSX and type assertions
=================================

<string>foo;

a = <div className='b' tabIndex=1 />;
b = <div>{ <string>a } <span>b</span> c</div>;

---

(program
  (expression_statement (type_assertion (type_arguments (predefined_type)) (identifier))) (expression_statement (assignment (identifier) (jsx_self_closing_element (identifier) (jsx_attribute (identifier) (string)) (jsx_attribute (identifier) (number))))) (expression_statement (assignment (identifier) (jsx_element (jsx_opening_element (identifier)) (jsx_expression (type_assertion (type_arguments (predefined_type)) (identifier))) (jsx_text) (jsx_element (jsx_opening_element (identifier)) (jsx_text) (jsx_closing_element (identifier))) (jsx_text) (jsx_closing_element (identifier))))))

=================================
Type assertions
=================================

<string>foo;

foo as any as Array<number>

---

(program
  (expression_statement
    (type_assertion (type_arguments (predefined_type)) (identifier)))
  (expression_statement
    (as_expression (as_expression (identifier) (predefined_type)) (type_reference (identifier) (type_arguments (predefined_type))))))

=================================
Ambient export function declarations
=================================

export interface Foo {
  export function OrderedMap<K, V>(iter: Iterable.Keyed<K, V>): OrderedMap<K, V>;
}

---

(program
  (export_statement
    (interface_declaration
      (identifier)
      (object_type
        (ambient_export_declaration
          (ambient_function
            (identifier)
            (call_signature
              (type_parameters (type_parameter (identifier)) (type_parameter (identifier)))
              (formal_parameters
                (required_parameter
                  (identifier)
                  (type_annotation
                    (type_reference
                      (identifier)
                      (identifier)
                      (type_arguments (type_reference (identifier)) (type_reference (identifier)))))))
                      (type_annotation (type_reference (identifier) (type_arguments (type_reference (identifier)) (type_reference (identifier))))))))))))


=================================
Ambient type alias declarations in namespaces
=================================

declare namespace moment {
  type formatFunction = () => string;

  export var x: string;
  export class foo {

  }
  export function utc(): Moment;
  export const enum Blah { Blaz, Bloz, Bleez }
}

---

(program
  (ambient_declaration
    (ambient_namespace
      (identifier)
      (ambient_namespace_body
      (ambient_namespace_element (type_alias_declaration (identifier) (function_type (formal_parameters) (predefined_type)))) (ambient_namespace_element (ambient_export_declaration (ambient_variable (ambient_binding (identifier) (type_annotation (predefined_type)))))) (ambient_namespace_element (ambient_export_declaration (class (identifier) (class_body)))) (ambient_namespace_element (ambient_export_declaration (ambient_function (identifier) (call_signature (formal_parameters) (type_annotation (type_reference (identifier))))))) (ambient_namespace_element (ambient_export_declaration (enum_declaration (identifier) (identifier) (identifier) (identifier))))))))

