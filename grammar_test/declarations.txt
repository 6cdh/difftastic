==================================
Ambient declarations
================================

declare class Error {
  constructor: Function
}

declare var foo: number;

declare function greet(greeting: string): void;

declare namespace myLib {
    function makeGreeting(s: string): string;
    let numberOfGreetings: number;

    interface LogOptions {
      verbose?: boolean;
    }
    interface AlertOptions {
      modal: boolean;
      title?: string;
      color?: string;
    }
}

declare class Greeter {
  constructor(greeting: string);

  greeting: string;
  showGreeting(): void;
}

---

(program
  (ambient_declaration
    (class
      (identifier)
      (class_body
        (public_field_definition (variable_declarator (identifier) (type_annotation (type_reference (identifier))))))))
  (ambient_declaration
    (ambient_variable (ambient_binding (identifier) (type_annotation (predefined_type)))))
  (ambient_declaration
    (ambient_function
      (identifier)
      (call_signature
        (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type))))
        (type_annotation (predefined_type)))))

  (ambient_declaration
    (ambient_namespace
      (identifier)
      (ambient_namespace_body
        (ambient_namespace_element
          (ambient_function
            (identifier)
            (call_signature
              (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type))))
              (type_annotation (predefined_type)))))
        (ambient_namespace_element
          (lexical_declaration (variable_declarator (identifier) (type_annotation (predefined_type)))))
        (ambient_namespace_element
          (interface_declaration
            (identifier)
            (object_type
              (property_signature (identifier) (type_annotation (predefined_type))))))
        (ambient_namespace_element
          (interface_declaration
            (identifier)
            (object_type
              (property_signature (identifier) (type_annotation (predefined_type)))
              (property_signature (identifier) (type_annotation (predefined_type)))
              (property_signature (identifier) (type_annotation (predefined_type)))))))))

  (ambient_declaration
    (class
      (identifier)
      (class_body
        (ambient_method_declaration
          (identifier) (call_signature (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type))))))
        (public_field_definition (variable_declarator (identifier) (type_annotation (predefined_type))))
        (ambient_method_declaration (identifier) (call_signature (formal_parameters) (type_annotation (predefined_type))))))))

==================================
Ambient exports
================================

export default function point(x: number, y: number) {
    return { x, y };
}

export default class A {}

---

(program
  (export_statement
    (function
      (identifier)
      (call_signature
        (formal_parameters
          (required_parameter (identifier) (type_annotation (predefined_type)))
          (required_parameter (identifier) (type_annotation (predefined_type)))))
          (statement_block
            (return_statement (object (identifier) (identifier))))))
  (export_statement (class (identifier) (class_body))))

==================================
Typeof types
================================

declare class Linter {
    static findConfiguration: typeof findConfiguration;
}

---

(program
  (ambient_declaration
    (class
      (identifier)
      (class_body
        (public_field_definition
          (variable_declarator
          (identifier)
          (type_annotation (type_query (identifier)))))))))

==================================
Export assignments
================================

export = Linter;

---

(program (export_statement (identifier)))

==================================
Property signatures with accessibility modifiers
================================

export interface IAppState {
  public readonly users: ReadonlyArray<User>
}

export class CloningRepository {
  public readonly id = CloningRepositoryID++
}


---

(program
  (export_statement
    (interface_declaration
      (identifier)
      (object_type
        (property_signature
          (accessibility_modifier)
          (readonly)
          (identifier)
          (type_annotation (type_reference (identifier) (type_arguments (type_reference (identifier)))))))))
  (export_statement
    (class
      (identifier)
      (class_body
        (public_field_definition
        (accessibility_modifier)
        (readonly)
        (variable_declarator (identifier) (math_op (identifier))))))))