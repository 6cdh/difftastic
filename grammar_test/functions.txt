==================================
Functions with typed parameters
================================

function greeter(person: string) {
  return "Hello, " + person;
}

function foo<T>(x: T): T {

}

function foo<T, U>(a: T[], f: (x: T) => U): U[] {

}

---

(program
  (expression_statement
    (function
      (identifier)
      (call_signature (formal_parameters (required_parameter (identifier) (type_annotation (predefined_type)))))
      (statement_block
        (return_statement (math_op (string) (identifier))))))
  (expression_statement
    (function
      (identifier)
      (call_signature
        (type_parameters (type_parameter (identifier)))
        (formal_parameters (required_parameter (identifier) (type_annotation (type_reference (identifier)))))
        (type_annotation (type_reference (identifier))))
        (statement_block)))
  (expression_statement
    (function
      (identifier)
      (call_signature
        (type_parameters (type_parameter (identifier)) (type_parameter (identifier)))
        (formal_parameters
          (required_parameter (identifier) (type_annotation (array_type (type_reference (identifier)))))
          (required_parameter
            (identifier)
            (type_annotation
              (function_type
                (formal_parameters (required_parameter (identifier) (type_annotation (type_reference (identifier))))) (type_reference (identifier))))))
        (type_annotation (array_type (type_reference (identifier)))))
      (statement_block))))

==================================
Function calls with type arguments
================================

const lines = new Array<DiffLine>()

---

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (function_call (new_expression (identifier)) (type_arguments (type_reference (identifier))) (arguments)))))

