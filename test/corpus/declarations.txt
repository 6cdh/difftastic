===============
local variable
===============

class A {
  int b() {
    int c = 5;
  }
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (method_signature (function_signature
         (integral_type)
         (identifier)
         (formal_parameter_list))
        )
        (function_body (block
          (local_variable_declaration
            type: (integral_type)
            declarator: (variable_declarator
              name: (identifier)
              value: (decimal_integer_literal))))))))

===============================
single type import declaration
===============================

import java.util.Vector;

---

(program (import_specification (identifier) (identifier) (identifier)))

===========================
type_import_on_declaraction
===========================

import java.util.*;

---

(program (import_specification (identifier) (identifier) (asterisk)))

=================================
single static import declaration
=================================

import static java.util.Vector;

---

(program (import_specification (identifier) (identifier) (identifier)))

===================================
static import on demand declaration
===================================

import static java.util.*;

---

(program (import_specification (identifier) (identifier) (asterisk)))

=================
class declaration
=================

class Point {
}

---

(program
  (class_definition
    (identifier)
      (class_body)))

=====================================================================
class declaration involving public, private, abstract and superclass
=====================================================================

class Point {
}

class Point {
}

abstract class ColoredPoint extends Point {
}

---

(program
  (class_definition  (identifier) (class_body))
  (class_definition  (identifier) (class_body))
  (class_definition (identifier) (superclass (type_identifier)) (class_body)))

==================================
class declaration with implements
==================================

 class Dog implements ISpeak {
}

---

(program
  (class_definition
     (identifier)
     (super_interfaces (type_identifier)) (class_body)))

============================
class declaration with body
============================

class Point {
  var x;
  var s = 'g';

  void bar() {
    x = 2;
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (declaration
        (inferred_type)
        (initialized_identifier_list (initialized_identifier (identifier))))
       (declaration
        (inferred_type)
        (initialized_identifier_list
        (initialized_identifier
                (identifier)
                (string_literal))))
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list)))
        (function_body
        (block
          (expression_statement
            (assignment_expression (identifier) (decimal_integer_literal))))))))

======================
interface declaration
======================

interface Top {
}

---

(program
  (interface_declaration
    (identifier)
    (interface_body)))

===================================
interface declaration with extends
===================================

interface Left extends Top {
}

interface Bottom extends Left, Right {}

---

(program
  (interface_declaration
    (identifier)
    (extends_interfaces (interface_type_list (type_identifier)))
    (interface_body))
  (interface_declaration
    (identifier)
    (extends_interfaces (interface_type_list (type_identifier) (type_identifier))) (interface_body)))

===========================================
interface with annotation type declaration
===========================================

@interface SelfRef {}

---

(program
  (annotation_type_declaration (identifier) (annotation_type_body)))

===================
method declaration
===================

class Beyonce {
  void calculateAnswer(double wingSpan, int numberOfEngines,
                       double length, double grossTons) {
      //do the calculation here
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list
          (formal_parameter (floating_point_type) (identifier))
          (formal_parameter (integral_type) (identifier))
          (formal_parameter (floating_point_type) (identifier))
          (formal_parameter (floating_point_type) (identifier))))
        )
        (function_body
        (block (comment))))))

========================
constructor declaration
========================

class Point {
  int x, y;
  Point(int x, int y) {
    this.x = x;
    this.y = y;
  }

  Point.json() {
    this(0, 0);
  }
  Point.json(this.x, this.y);
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (declaration
        (integral_type)
        (initialized_identifier_list
        (initialized_identifier (identifier))
        (initialized_identifier (identifier))
        )
        )
      (method_signature (constructor_signature
        name: (identifier)
        parameters: (formal_parameter_list
          (formal_parameter
            type: (integral_type)
            name: (identifier))
          (formal_parameter
            type: (integral_type)
            name: (identifier)))))
        (function_body
          (block (expression_statement (assignment_expression
            left: (field_access
              object: (this)
              field: (identifier))
            right: (identifier)))
          (expression_statement (assignment_expression
            left: (field_access
              object: (this)
              field: (identifier))
            right: (identifier)))))
      (method_signature (constructor_signature
        name: (identifier)
        name: (identifier)
        parameters: (formal_parameter_list)))
        (function_body
            (block
                (expression_statement
                    (method_invocation
                        name: (this)
                        arguments: (arguments
                            (decimal_integer_literal)
                            (decimal_integer_literal)
                            )
                    )
                )
            )
         )
      (declaration
      (constructor_signature
        name: (identifier)
        name: (identifier)
        parameters: (formal_parameter_list
        (constructor_param (identifier))
        (constructor_param (identifier))
        ))))
              )
              )

======================
object instantiation
======================

class Point {
  double Foo() {
    new BufferedWriter();
    Foo.new BufferedWriter();
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (floating_point_type)
        (identifier)
        (formal_parameter_list))
        )
        (function_body (block
          (expression_statement
            (object_creation_expression
              (type_identifier)
              (arguments)))
          (expression_statement
            (object_creation_expression
              (identifier)
              (type_identifier)
              (arguments))))))))

=====================
variable declaration
=====================

class JayZ {
  void Beyonce() {
    int blue_ivy_carter;
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list)))
        (function_body
        (block
          (local_variable_declaration
            (integral_type)
            (variable_declarator
              (identifier))))))))

=================
enum declaration
=================

enum HandSign {
   SCISSOR, PAPER, STONE
}

---

(program
  (enum_declaration
    name: (identifier)
    body: (enum_body
      (enum_constant name: (identifier))
      (enum_constant name: (identifier))
      (enum_constant name: (identifier)))))
