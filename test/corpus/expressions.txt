============================================
Functions
============================================
function() 1
function() {}
function(arg1, arg2) {
  arg2
}

function(x, y) return(y)

----

(program
  (function_definition (formal_parameters) (integer))
  (function_definition (formal_parameters) (brace_list))
  (function_definition
    (formal_parameters (identifier) (identifier))
    (brace_list (identifier)))
  (function_definition
    (formal_parameters (identifier) (identifier))
    (return (identifier))))

==========
relational
==========

a == b

---
(program
  (binary
    (identifier) (identifier)))

========
additive
========

a + b

---

(program
  (binary
    (identifier) (identifier)))

========
multiplicative
========

a * b

---

(program
  (binary
    (identifier) (identifier)))

==============
binary operations
==============

2+2*2

---

(program
  (binary
    (integer)
    (binary
       (integer)
       (integer))))

===========
unary minus
===========

-a
foo(-a, bar)

---

(program
  (unary (identifier))
  (call (identifier) 
    (arguments
      (unary (identifier))
      (identifier))))

===========
binary minus
===========

foo-a

---

(program
  (binary (identifier) (identifier)))


===================
Operator precedence
===================

a <= b && c >= d
a[1] <- foo || bar
a && b(c) && d
val <- foo %>% bar(1) %>% baz()
---

(program

  (binary
    (binary (identifier) (identifier))
    (binary (identifier) (identifier)))

  (assignment
    left: (subset (identifier) (arguments (integer)))
    right: (binary (identifier) (identifier)))

  (binary
     (binary (identifier) (call function: (identifier) arguments: (arguments (identifier))))
     (identifier))

  (assignment
    left: (identifier)
    right: (binary
      (binary
        (identifier)
        (special)
        (call
          function: (identifier)
          arguments: (arguments (integer))))
      (special)
      (call
        function: (identifier)))))

========
Specials
========

x %% y

x %+% y

x %>% y

x %some text% y

x %some \% escaped text% y

---

(program
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special (escape_sequence)) (identifier)))

===========
subset
===========

foo[bar]
foo[1, 2]
foo[1, ]

---

(program
  (subset
    (identifier)
    (arguments
     (identifier)))
  (subset
    (identifier)
    (arguments
      (integer)
      (integer)))
  (subset
    (identifier)
    (arguments
      (integer))))

============================================
If
============================================

if (x)
  log(y)

if (a.b) {
  log(c)
  d
}

----

(program
  (if
    condition: (identifier)
    consequence: (call function: (identifier) arguments: (arguments (identifier))))
  (if
    condition: (identifier)
    consequence: (brace_list
      (call
       function: (identifier)
       arguments: (arguments (identifier)))
      (identifier))))

============================================
If-else
============================================

if (x)
  y
else if (a)
  b

if (a) {
  c
  d
} else {
  e
}

----

(program
  (if
   condition: (identifier)
   consequence: (identifier)
   alternative: (if
     condition: (identifier)
     consequence: (identifier)))

  (if
   condition: (identifier)
   consequence: (brace_list (identifier) (identifier))
   alternative: (brace_list (identifier))))


===
for
===

for (x in y)
  f

---

(program
  (for
    name: (identifier)
    vector: (identifier)
    body: (identifier)))

=====
While
=====

while(TRUE)
  bar

---

(program
  (while
    condition: (identifier)
    body: (identifier)))
============================================
Namespace get
============================================

foo::bar
foo::bar(1)

---

(program
  (namespace_get
    namespace: (identifier)
    function: (identifier))
  (call
    function: (namespace_get
     namespace: (identifier)
     function: (identifier))
    arguments: (arguments (integer))))

==========
Assignment
==========

x <- 1
x <<- 1
1 -> x
x <- y(1)
y(1) -> x

---

(program
 (assignment
  left: (identifier)
  right: (integer))

 (assignment
  left: (identifier)
  right: (integer))

 (assignment
  right: (integer)
  left: (identifier))

 (assignment
  left: (identifier)
  right: (call function: (identifier) arguments: (arguments (integer))))

 (assignment
  right: (call function: (identifier) arguments: (arguments (integer)))
  left: (identifier)))
