============================================
Functions
============================================
function() 1
function() {}
function(arg1, arg2) {
  arg2
}

function(x, y) return(y)

----

(program
  (function_definition (formal_parameters) (integer))
  (function_definition (formal_parameters) (brace_list))
  (function_definition
    (formal_parameters (identifier) (identifier))
    (brace_list (identifier)))
  (function_definition
    (formal_parameters (identifier) (identifier))
    (return (identifier))))

==========
relational
==========

a == b

---
(program
  (binary
    (identifier) (identifier)))

========
additive
========

a + b

---

(program
  (binary
    (identifier) (identifier)))

========
multiplicative
========

a * b

---

(program
  (binary
    (identifier) (identifier)))

==============
binary operations
==============

2+2*2

---

(program
  (binary
    (integer)
    (binary
       (integer)
       (integer))))

===========
unary minus
===========

-a
foo(-a, bar)

---

(program
  (unary (identifier))
  (call (identifier) 
    (argument_list
      (unary (identifier))
      (identifier))))

===========
binary minus
===========

foo-a

---

(program
  (binary (identifier) (identifier)))

===========
subset
===========

foo[bar]
foo[1, 2]
foo[1, ]

---

(program
  (subset
    (identifier)
    (argument_list
     (identifier)))
  (subset
    (identifier)
    (argument_list
      (integer)
      (integer)))
  (subset
    (identifier)
    (argument_list
      (integer))))

============================================
If
============================================

if (x)
  log(y)

if (a.b) {
  log(c)
  d
}

----

(program
  (if
    condition: (identifier)
    consequence: (call (identifier) (argument_list (identifier))))
  (if
    condition: (identifier)
    consequence: (brace_list
      (call (identifier) (argument_list (identifier)))
      (identifier))))

============================================
If-else
============================================

if (x)
  y
else if (a)
  b

if (a) {
  c
  d
} else {
  e
}

----

(program
  (if
   condition: (identifier)
   consequence: (identifier)
   alternative: (if
     condition: (identifier)
     consequence: (identifier)))

  (if
   condition: (identifier)
   consequence: (brace_list (identifier) (identifier))
   alternative: (brace_list (identifier))))

============================================
Namespace get
============================================

foo::bar
foo::bar(1)

---

(program
  (namespace_get
    namespace: (identifier)
    function: (identifier))
  (call
    (namespace_get
     namespace: (identifier)
     function: (identifier))
    (argument_list (integer))))
