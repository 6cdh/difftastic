==================================
standalone assignment expression
==================================

x = 3;

---

(program
  (expression_statement (assignment_expression
    (identifier)
    (decimal_integer_literal))))

==================================
standalone binary expression
==================================

a > b;
a < b;
a == b;
a >= b;
a <= b;
a != b;
a && b;
a || b;
a & b;
a | b;
a ^ b;
a % b;
a << b;
a >> b;
a >>> b;
3 + 2;
3 - 2;
3 * 2;
9 / 3;

---

(program
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (decimal_integer_literal) (decimal_integer_literal)))
  (expression_statement (binary_expression (decimal_integer_literal) (decimal_integer_literal)))
  (expression_statement (binary_expression (decimal_integer_literal) (decimal_integer_literal)))
  (expression_statement (binary_expression (decimal_integer_literal) (decimal_integer_literal))))

==================================
instanceof expressions
==================================

a instanceof C.D;
a instanceof List<B>;
c instanceof C[];

---

(program
  (expression_statement (instanceof_expression
    (identifier)
    (scoped_type_identifier (type_identifier) (type_identifier))))
  (expression_statement (instanceof_expression
    (identifier)
    (generic_type (type_identifier) (type_arguments (type_identifier)))))
  (expression_statement (instanceof_expression
    (identifier)
    (array_type (type_identifier) (dimensions)))))

===========================================================
if statements
===========================================================

if (x)
  y;

---

(program
  (if_statement
    condition: (parenthesized_expression (identifier))
    consequence: (expression_statement (identifier))))

===========================================================
if statements with braces
===========================================================

if (x) {
  y;
}

---

(program
  (if_statement
    condition: (parenthesized_expression (identifier))
    consequence: (block (expression_statement (identifier)))))

===========================================================
if statements with assignment without braces
===========================================================

if (x = 3)
  y = 2;

---

(program
  (if_statement
    condition: (parenthesized_expression
      (assignment_expression
        left: (identifier)
        right: (decimal_integer_literal)))
    consequence: (expression_statement
      (assignment_expression
        left: (identifier)
        right: (decimal_integer_literal)))))

==================================
if then else statement
==================================

if (x = 3) {
  y = 9;
} else {
  y = 0;
}

---

(program
  (if_statement
    condition: (parenthesized_expression
      (assignment_expression
        left: (identifier)
        right: (decimal_integer_literal)))
    consequence: (block
      (expression_statement (assignment_expression
        left: (identifier)
        right: (decimal_integer_literal))))
    alternative: (block
      (expression_statement (assignment_expression
        left: (identifier)
        right: (decimal_integer_literal))))))

==================================
nested if then else statements
==================================

if (a)
  if (b)
    c();
  else
    d();

---

(program
  (if_statement
    (parenthesized_expression (identifier))
    (if_statement
      (parenthesized_expression (identifier))
      (expression_statement (method_invocation (identifier) (argument_list)))
      (expression_statement (method_invocation (identifier) (argument_list))))))

==================================
ternary expressions
==================================

max = (a > b) ? a : b;

---

(program
  (expression_statement (assignment_expression
    left: (identifier)
    right: (ternary_expression
      condition: (parenthesized_expression (binary_expression
        left: (identifier)
        right: (identifier)))
      consequence: (identifier)
      alternative: (identifier)))))

==================================
for statement
==================================

for(int i = 1; i < 11; i++) {
  System.out.println("Count is: " + i);
}

for (j.init(i); j.check(); j.update()) {
  System.out.println(j);
}

---

(program
  (for_statement
    init: (local_variable_declaration
      type: (integral_type)
      declarator: (variable_declarator
        name: (identifier)
        value: (decimal_integer_literal)))
    condition: (binary_expression
      left: (identifier)
      right: (decimal_integer_literal))
    update: (update_expression (identifier))
    body: (block
      (expression_statement (method_invocation
        object: (scoped_identifier
          scope: (identifier)
          name: (identifier))
        name: (identifier)
        arguments: (argument_list (binary_expression
          left: (string_literal)
          right: (identifier)))))))
  (for_statement
    init: (method_invocation
      object: (identifier)
      name: (identifier)
      arguments: (argument_list (identifier)))
    condition: (method_invocation
      object: (identifier)
      name: (identifier)
      arguments: (argument_list))
    update: (method_invocation
      object: (identifier)
      name: (identifier)
      arguments: (argument_list))
    body: (block
      (expression_statement (method_invocation
        object: (scoped_identifier
          scope: (identifier)
          name: (identifier))
        name: (identifier)
        arguments: (argument_list (identifier)))))))

================================
Enhanced for statements
================================

for (A b in c) {
  d(b);
}

---

(program
  (enhanced_for_statement
    (type_identifier)
    (identifier)
    (identifier)
    (block
      (expression_statement (method_invocation
        (identifier)
        (argument_list (identifier)))))))

