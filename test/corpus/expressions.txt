============================================
Functions
============================================
function() 1
function() {}
function(arg1, arg2) {
  arg2
}

function(x, y) return(y)

function(x, ...) f(...)

----

(program
  (function_definition (formal_parameters) (float))
  (function_definition (formal_parameters) (brace_list))
  (function_definition
    (formal_parameters (identifier) (identifier))
    (brace_list (identifier)))
  (function_definition
    (formal_parameters (identifier) (identifier))
    (return (identifier)))
  (function_definition
    (formal_parameters (identifier) (dots))
    (call (identifier) (arguments (dots)))))

==========
Relational
==========

a == b

---
(program
  (binary
    (identifier) (identifier)))

========
Additive
========

a + b

---

(program
  (binary
    (identifier) (identifier)))

========
Multiplicative
========

a * b

---

(program
  (binary
    (identifier) (identifier)))

==============
Binary operations
==============

2+2*2

---

(program
  (binary
    (float)
    (binary
       (float)
       (float))))

===========
Unary minus
===========

-a
foo(-a, bar)

---

(program
  (unary (identifier))
  (call (identifier) 
    (arguments
      (unary (identifier))
      (identifier))))

===========
Binary minus
===========

foo-a

---

(program
  (binary (identifier) (identifier)))


===================
Operator precedence
===================

a <= b && c >= d
a[1] <- foo || bar
a && b(c) && d
val <- foo %>% bar(1) %>% baz()

---

(program

  (binary
    (binary (identifier) (identifier))
    (binary (identifier) (identifier)))

  (left_assignment
   name: (subset (identifier) (arguments value: (float)))
   value: (binary (identifier) (identifier)))

  (binary
     (binary (identifier) (call function: (identifier) arguments: (arguments value: (identifier))))
     (identifier))

  (left_assignment
   name: (identifier)
   value: (binary
     (binary
      (identifier)
      (special)
      (call
       function: (identifier)
       arguments: (arguments value: (float))))
     (special)
     (call
      function: (identifier)))))

========
Specials
========

x %% y

x %+% y

x %>% y

x %some text% y

x %some \% escaped text% y

---

(program
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special) (identifier))
  (binary (identifier) (special (escape_sequence)) (identifier)))

===========
Subset
===========

foo[bar]
foo[1, 2]
foo[1, ]
foo[]

---

(program
  (subset
    (identifier)
    (arguments
     (identifier)))
  (subset
    (identifier)
    (arguments
      (float)
      (float)))
  (subset
    (identifier)
    (arguments
      (float)))
  (subset
    (identifier)))

===========
Subset2
===========

foo[[x]]
foo[[x, y]]
foo[[]]

---

(program
  (subset2 (identifier)
  (arguments (identifier)))

  (subset2 (identifier)
  (arguments (identifier) (identifier)))

  (subset2
    (identifier)))

============================================
If
============================================

if (x)
  log(y)

if (a.b) {
  log(c)
  d
}

---

(program
  (if
    condition: (identifier)
    consequence: (call function: (identifier) arguments: (arguments value: (identifier))))
  (if
    condition: (identifier)
    consequence: (brace_list
      (call
       function: (identifier)
       arguments: (arguments value: (identifier)))
      (identifier))))

============================================
If-else
============================================

if (x)
  y else if (a)
  b

if (a) {
  c
  d
} else {
  e
}

---

(program
  (if
   condition: (identifier)
   consequence: (identifier)
   alternative: (if
     condition: (identifier)
     consequence: (identifier)))

  (if
   condition: (identifier)
   consequence: (brace_list (identifier) (identifier))
   alternative: (brace_list (identifier))))


===
for
===

for (x in y)
  f

---

(program
  (for
    name: (identifier)
    vector: (identifier)
    body: (identifier)))

=====
While
=====
while(TRUE)
  bar

while(x > 0)
  x <- x - 1

while(TRUE)
  break

while(TRUE)
  next

---

(program
  (while
    condition: (true)
    body: (identifier))

  (while
    condition: (binary (identifier) (float))
    body: (left_assignment name: (identifier) value: (binary (identifier) (float))))

  (while
    condition: (true)
    body: (break))

  (while
    condition: (true)
    body: (next)))

=====
Repeat
=====

repeat 1

---

(program
  (repeat
    body: (float)))

======
Switch
======

switch(foo,
  x = 1,
  "y" = 2,
  z = ,
  3
)

---

(program
  (switch
   value: (identifier)
   body: (arguments
     name: (identifier)
     value: (float)
     name: (string)
     value: (float)
     name: (identifier)
     value: (float))))

======
Dollar
======

foo$bar

---

(program
  (dollar
    (identifier) (identifier)))

======
Slot
======

foo@bar

---

(program
  (slot
    (identifier) (identifier)))

============================================
Namespace get
============================================

foo::bar
foo::bar(1)

---

(program
  (namespace_get
    namespace: (identifier)
    function: (identifier))
  (call
    function: (namespace_get
     namespace: (identifier)
     function: (identifier))
    arguments: (arguments value: (float))))

============================================
Namespace get internal
============================================

foo:::bar
foo:::bar(1)

---

(program
  (namespace_get_internal
    namespace: (identifier)
    function: (identifier))
  (call
    function: (namespace_get_internal
     namespace: (identifier)
     function: (identifier))
    arguments: (arguments value: (float))))

==========
Assignment
==========

x <- 1
x = 1
x <<- 1
1 -> x
x <- y(1)
y(1) -> x

---

(program
  (left_assignment
    name: (identifier)
    value: (float))

  (equals_assignment
    name: (identifier)
    value: (float))

  (super_assignment
   name: (identifier)
   value: (float))

  (right_assignment
   value: (float)
   name: (identifier))

  (left_assignment
   name: (identifier)
   value: (call function: (identifier) arguments: (arguments value: (float))))

  (right_assignment
   value: (call function: (identifier) arguments: (arguments value: (float)))
   name: (identifier)))

=====
Calls
=====

f()
f(x)
f(x, )
f(x, y)
f(x, y = 2)
f(x, y =)
f(f2(x, y))
f(,)
f(x,)
f(,y)
f(x=,)
f(,y=)

---

(program

  (call function: (identifier))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier) value: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier) name: (identifier) value: (float)))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier) name: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments value:
      (call
       function: (identifier)
       arguments: (arguments value: (identifier) value: (identifier)))))

  (call
    function: (identifier)
    arguments: (arguments))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments value: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments name: (identifier)))

  (call
    function: (identifier)
    arguments: (arguments name: (identifier))))

======
Braces
======

{}

{1}

{1; 2}

{1;
2}

{1
2
}

{
1
2
}

---

(program
  (brace_list)
  (brace_list (float))
  (brace_list (float) (float))
  (brace_list (float) (float))
  (brace_list (float) (float))
  (brace_list (float) (float)))

=====
Colon
=====

1:2
(1 + 1):-5

---

(program
  (binary (float) (float))

  (binary
    (paren_list (binary (float) (float)))
    (unary (float))))

=====
Formulas
=====

~x
y~x

---

(program

  (unary (identifier))

  (binary (identifier) (identifier)))
