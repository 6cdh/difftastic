==================================
while statement
==================================

class WhileDemo {
    void main(String[] args){
        int count = 1;
        while (count < 11) {
            System.out.println("Count is: " + count);
            count++;
        }
    }
}

---

 (program
  (class_definition
    name: (identifier)
    body: (class_body
      (method_signature
        (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list
          (formal_parameter
            type: (array_type
              element: (type_identifier)
              dimensions: (dimensions))
            name: (identifier)))

            )
            )

        (function_body
        (block
          (local_variable_declaration
            type: (integral_type)
            declarator: (variable_declarator
              name: (identifier)
              value: (decimal_integer_literal)))
          (while_statement
            condition: (parenthesized_expression
              (binary_expression
                left: (identifier)
                right: (decimal_integer_literal)))
            body: (block
              (expression_statement (method_invocation
                object: (scoped_identifier
                  scope: (identifier)
                  name: (identifier))
                name: (identifier)
                arguments: (arguments
                  (binary_expression left: (string_literal) right: (identifier)))))
              (expression_statement (update_expression (identifier))))
              )
              ))
              )
              ))

==================================
try-with-resources statements
==================================

try (FileInputStream input = new FileInputStream("file.txt")) {
  int data = input.read();
}

---

(program
  (try_with_resources_statement
    resources: (resource_specification
      (resource
        type: (type_identifier)
        name: (identifier)
        value: (object_creation_expression
          type: (type_identifier)
          arguments: (arguments (string_literal)))))
    body: (block
      (local_variable_declaration
        type: (integral_type)
        declarator: (variable_declarator
          name: (identifier)
          value: (method_invocation
            object: (identifier)
            name: (identifier)
            arguments: (arguments)))))))

==================================
return statement
==================================

return x;
return x * y;
return x + 2;
return fire(x);

---

(program
  (return_statement (identifier))
  (return_statement (binary_expression (identifier) (identifier)))
  (return_statement (binary_expression (identifier) (decimal_integer_literal)))
  (return_statement (method_invocation (identifier) (arguments (identifier)))))

==================================
annotation
==================================

@SuppressWarnings(value = "unchecked")
@GwtCompatible(emulated = true)
class Duck {

}

---

(program
  (class_definition
      (annotation
        (identifier)
        (annotation_arguments
          (element_value_pair
            (identifier)
            (string_literal))))
      (annotation
        (identifier)
        (annotation_arguments
          (element_value_pair
            (identifier)
            (true)
            )
          )
        )

    (identifier)
    (class_body)
  )
)

==================================
marker annotation
==================================

@Override
class Quack {
  @bar
  void foo() {

  }
}

---

(program
  (class_definition
    (marker_annotation (identifier))
    (identifier)
    (class_body
      (marker_annotation (identifier))
      (method_signature
      (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list)
        ))
        (function_body
        (block))
        )))

==================================
single element annotation
==================================

@Duck(waddle.swim)
@SuppressWarnings("unchecked")
class Quack {

}

---

(program
  (class_definition
      (annotation (identifier) (annotation_arguments (scoped_identifier (identifier) (identifier))))
      (annotation (identifier) (annotation_arguments (string_literal)))
    (identifier)
    (class_body)))

==================================
lambda expression
==================================

class LambdaTest {
  void singleton() {
    (Str version) => create;
    (Str a) {
     int destinysChild = 2;
     };
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list)))
        (function_body
        (block
          (expression_statement (lambda_expression
            (formal_parameter_list (formal_parameter (type_identifier) (identifier)))
            (function_expression_body (identifier))))
          (expression_statement (lambda_expression
            (formal_parameter_list (formal_parameter (type_identifier) (identifier)) )
            (function_expression_body
            (block
                      (local_variable_declaration
                         (integral_type)
                         (variable_declarator
                           (identifier)
                           (decimal_integer_literal)))
            )))
            )))


      )))

==================================
switch statement
==================================

class SwitchDemo {
  static void main(String[] args) {
    int destinysChild = 2;
    String destinysChildString;
    switch (destinysChild) {
        case 1:  destinysChildString = "Beyonce";
                 break;
        case 2:  destinysChildString = "Kelly";
                 break;
        case 3:  destinysChildString = "Michelle";
                 break;
        default: destinysChildString = "Invalid";
                 break;
    }
    System.out.println(destinysChildString);
  }
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list
          (formal_parameter
            type: (array_type
              element: (type_identifier)
              dimensions: (dimensions))
            name: (identifier)))

            ))
        (function_body (block
          (local_variable_declaration
            type: (integral_type)
            declarator: (variable_declarator
              name: (identifier)
              value: (decimal_integer_literal)))
          (local_variable_declaration
            type: (type_identifier)
            declarator: (variable_declarator name: (identifier)))
          (switch_statement
            condition: (parenthesized_expression (identifier))
            body: (switch_block
              (switch_label (decimal_integer_literal))
              (expression_statement (assignment_expression
                left: (identifier)
                right: (string_literal)))
              (break_statement)
              (switch_label (decimal_integer_literal))
              (expression_statement (assignment_expression
                left: (identifier)
                right: (string_literal)))
              (break_statement)
              (switch_label (decimal_integer_literal))
              (expression_statement (assignment_expression
                left: (identifier)
                right: (string_literal)))
              (break_statement)
              (switch_label)
              (expression_statement (assignment_expression
                left: (identifier)
                right: (string_literal)))
              (break_statement)))
          (expression_statement (method_invocation
            object: (scoped_identifier
              scope: (identifier)
              name: (identifier))
            name: (identifier)
            arguments: (arguments (identifier))))))
            )))

==================================
type arguments
==================================

class Box <T> {
  T theObject;
  Box( T arg) { theObject = arg; }
  // more code
}

---

(program
  (class_definition
    (identifier)
      (type_parameters
        (type_parameter
          (identifier)))
    (class_body
      (declaration
          (type_identifier)
(initialized_identifier_list (initialized_identifier (identifier)))
)
      (method_signature (constructor_signature
        (identifier)
        (formal_parameter_list
          (formal_parameter
            (type_identifier)
            (identifier)))))
        (function_body
          (block (expression_statement (assignment_expression
            (identifier)
              (identifier)))))
      (comment))))

==================================
wildcard
==================================

class WildcardDemo {
  List<? extends B> a;
}

---

(program
  (class_definition
    (identifier)
      (class_body
        (declaration
          (generic_type
            (type_identifier)
            (type_arguments
              (wildcard (type_identifier))))
          (initialized_identifier_list (initialized_identifier (identifier)))
          ))))

==================================
type arguments with generic types
==================================

class someClass <T> {
  List<T> someMethod() {
     List< T > list = Collections.<S>emptyList();
     return list;
  }
  void anotherMethod<T>(S arg) {
     List< S > list = Collections.<T>emptyList();
  }
}

---

(program
  (class_definition
    (identifier)
    (type_parameters
      (type_parameter
        (identifier)))
      (class_body
        (method_signature (function_signature (generic_type
              (type_identifier)
              (type_arguments (type_identifier)))
            (identifier)
            (formal_parameter_list)
            ))
            (function_body (block
              (local_variable_declaration
                (generic_type
                  (type_identifier)
                  (type_arguments (type_identifier)))
                (variable_declarator
                  (identifier)
                  (method_invocation
                    (identifier)
                    (identifier)
                     (type_arguments (type_identifier))
                    (arguments))))
              (return_statement (identifier))))
        (method_signature (function_signature
                  (void_type)
                    (identifier)
          (type_parameters
            (type_parameter
              (identifier)))
            (formal_parameter_list
              (formal_parameter
                (type_identifier)
                (identifier)))
            ))
            (function_body (block
              (local_variable_declaration
                (generic_type
                  (type_identifier)
                  (type_arguments (type_identifier)))
                (variable_declarator
                  (identifier)
                  (method_invocation
                    (identifier)
                    (type_arguments (type_identifier))
                    (identifier)
                    (arguments)))))))))

==================================
empty type arguments
==================================

Box<Integer> integerBox = new Box<>();

---

(program
  (local_variable_declaration
    (generic_type (type_identifier) (type_arguments (type_identifier)))
    (variable_declarator
      (identifier)
      (object_creation_expression
        (generic_type (type_identifier) (type_arguments))
        (arguments)))))

=================
method references
=================

action = bar::method;
foo.bar::method;
String[]::new;
Foo<T>::apply;
super::something;

---

(program
  (expression_statement (assignment_expression (identifier) (method_reference (identifier) (identifier))))
  (expression_statement (method_reference (scoped_identifier (identifier) (identifier)) (identifier)))
  (expression_statement (method_reference (array_type (type_identifier) (dimensions))))
  (expression_statement (method_reference (generic_type (type_identifier) (type_arguments (type_identifier))) (identifier)))
  (expression_statement (method_reference (super) (identifier))))
